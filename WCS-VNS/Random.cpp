// Random.cpp
// PRNG/xrand Pseudo Random Number Generator code
// Built by Chris "Xenon" Hanson from parts of Useful.cpp and some new code
// on 09 Nov 1998. Copyright 1998
// Recoded PRNG routines to use 64 bit numbers
// FPW2: Our original code is based on standard Unix algorithm for rand48:
// r(n+1) = (a * r(n) + c) mod m
// where a = 0x5deece66d (not 0xfdeece66d as all the BSD docs report)
// c = 0xb (11), and m = 2^48
// There are known deficiencies in this algorithm, but do we care? ;)

#include "stdafx.h"

#define NEWSEED

#ifdef BUILD_LIB
// we no longer think we want C-style linkage
//extern "C" {
#endif // BUILD_LIB

#include "Random.h"

// Pretty random assortment of bits, global seed for xrand
static UINT64 rnum48;

// seed for xseed48backcompat/xrand48intbackcompat
unsigned int Seed[3];
#define XRAND_PORTABLE_DECOMPOSE
#define XRAND_PORTABLE_COMPOSE



// random selection of nibbles with 2 bits set
static const unsigned long hitable[16] = {
0x3a99c3a6,
0x35ca5566,
0x33695959,
0xa6653936,
0x3a3cac35,
0xaa5a95a3,
0xa6aa6c3c,
0x6ca6aaaa,
0x5939a593,
0xcca6965c,
0xc36a53cc,
0xc356ca93,
0x9c96659c,
0xcc3a693a,
0x55a599a6,
0xa39aa666
};

// random selection of nibbles with 2 bits set
static const unsigned long lotable[16] = {
0x35c955c3,
0xa399cacc,
0x336a6939,
0xa99c3a9c,
0x5a5a9953,
0xc6956699,
0xc9aac5aa,
0x656ca55c,
0x5c563999,
0xca6355c3,
0x965aa696,
0xacca363c,
0xaccc3ac9,
0x53395353,
0x69a993ac,
0x953c3a69
};

// 16 sets of 0..15 randomized
static const unsigned char indexer[256] = {
2, 5, 3, 12, 10, 11, 13, 6,
7, 8, 0, 4, 15, 7, 14, 6,
9, 10, 12, 9, 14, 12, 2, 5,
8, 2, 1, 9, 5, 5, 7, 7,
15, 10, 3, 1, 9, 5, 9, 6,
1, 9, 12, 10, 14, 6, 12, 1,
0, 2, 3, 4, 8, 15, 12, 5,
0, 8, 10, 10, 1, 6, 8, 12,
10, 10, 6, 0, 14, 2, 8, 3,
0, 5, 13, 2, 11, 3, 14, 15,
10, 8, 0, 1, 10, 5, 5, 13,
3, 4, 9, 15, 5, 11, 13, 9,
14, 5, 2, 10, 5, 1, 15, 8,
15, 4, 15, 8, 14, 12, 9, 6,
15, 6, 14, 11, 14, 12, 15, 2,
13, 1, 8, 1, 2, 7, 0, 5
};


// for xseed48backcompat
// S-Box tables, used for xrand/PRNGX
extern const unsigned char xrSBoxA[256] = {
 0xEA, 0x86, 0x45, 0x49, 0xD0, 0xA9, 0x82, 0x5A, 0x03, 0x07, 0xC3, 0xFA, 0x0B, 0x61, 0xC6, 0x3D,
 0x29, 0x5F, 0x2A, 0xAF, 0xB8, 0xE8, 0x0D, 0xA4, 0xE0, 0x10, 0x9D, 0xB7, 0x36, 0x5D, 0x2E, 0xE5,
 0xDA, 0x27, 0x7A, 0x54, 0xB1, 0xEB, 0xCD, 0x00, 0xF6, 0xD8, 0x7E, 0x67, 0x39, 0x01, 0xD3, 0x8C,
 0x94, 0xB3, 0x41, 0xB2, 0x24, 0x0A, 0x3B, 0xFE, 0x48, 0x53, 0xCF, 0x97, 0x9C, 0x09, 0x59, 0xC8,
 0x04, 0x1C, 0x84, 0xAE, 0xA0, 0xA1, 0x4D, 0x40, 0x6B, 0xEF, 0xC1, 0x6F, 0x55, 0xD7, 0x4B, 0xC5,
 0x83, 0xFD, 0xD9, 0x3F, 0x65, 0x87, 0x06, 0x51, 0xF3, 0x50, 0x32, 0xCA, 0xAA, 0x60, 0x12, 0x6A,
 0x68, 0xBD, 0xCB, 0x1B, 0x63, 0x21, 0x9E, 0x7D, 0x7B, 0xFB, 0x0E, 0x56, 0x96, 0xCC, 0x42, 0xAC,
 0xDE, 0x92, 0x77, 0xF2, 0xA7, 0x30, 0x47, 0xE1, 0xBC, 0xEE, 0xC7, 0xC4, 0x5E, 0x17, 0x19, 0x7C,
 0x2F, 0x71, 0x26, 0x3E, 0x28, 0xF8, 0xE7, 0xA8, 0x20, 0x22, 0xD6, 0x99, 0x05, 0x80, 0xF5, 0x3C,
 0x6C, 0x18, 0x31, 0xE9, 0xDD, 0xB9, 0xDF, 0xB5, 0xF1, 0xD5, 0x98, 0x1A, 0x23, 0x4E, 0x1E, 0x91,
 0xC2, 0x5C, 0xE6, 0x6D, 0x15, 0x25, 0xB6, 0x16, 0xB4, 0xED, 0x1F, 0x8A, 0x0F, 0x52, 0xDC, 0x69,
 0x8B, 0xA6, 0xA2, 0xC9, 0x88, 0xD2, 0x8E, 0xD4, 0xF0, 0x02, 0x37, 0x4A, 0x9A, 0x3A, 0xD1, 0x8D,
 0x2B, 0xFF, 0x11, 0xA5, 0x35, 0xBE, 0x4C, 0xAD, 0xFC, 0xAB, 0x76, 0xE4, 0x5B, 0x90, 0x6E, 0x73,
 0xF9, 0x85, 0x08, 0x95, 0x89, 0x33, 0x62, 0x93, 0x79, 0x4F, 0x58, 0xBF, 0xE3, 0x70, 0x72, 0x46,
 0x34, 0x38, 0xCE, 0x57, 0x2D, 0x9F, 0xF7, 0x1D, 0x44, 0x64, 0xE2, 0x7F, 0x0C, 0x74, 0xBB, 0x75,
 0x8F, 0x2C, 0x14, 0x9B, 0x43, 0x81, 0x13, 0xDB, 0x66, 0x78, 0xF4, 0xB0, 0xBA, 0xC0, 0xA3, 0xEC
 };

// Three times normal size, avoids modulo/mask operation
extern const unsigned char xrSBoxB[768] = {
 0x27, 0x3E, 0xB9, 0xED, 0x56, 0xB2, 0x22, 0x1A, 0x86, 0xAB, 0x7C, 0xE1, 0xEB, 0xDC, 0xA1, 0x81,
 0xF6, 0x1E, 0x58, 0x3C, 0x4E, 0x39, 0xCA, 0x53, 0x7A, 0x72, 0xDE, 0x8F, 0xB3, 0x0A, 0x52, 0xD8,
 0x5B, 0x4B, 0xE2, 0x11, 0xAA, 0x71, 0x60, 0x38, 0x67, 0x47, 0xC3, 0x7E, 0xE3, 0x15, 0x94, 0xEA,
 0x54, 0xCF, 0x13, 0xF2, 0x4C, 0xCD, 0xF8, 0xFF, 0xD9, 0x59, 0xD3, 0xC5, 0x5E, 0x51, 0x69, 0xDB,
 0xBA, 0x65, 0xAC, 0x26, 0xA6, 0x77, 0x96, 0x98, 0x12, 0x88, 0x89, 0xAF, 0xAE, 0x7D, 0xB5, 0x28,
 0x64, 0xBD, 0x97, 0xF5, 0xC6, 0xA5, 0x4F, 0xBC, 0x7B, 0x8E, 0x32, 0xC0, 0x1B, 0xD1, 0x16, 0xFB,
 0x0D, 0x1C, 0x3D, 0x37, 0x31, 0x7F, 0x09, 0x19, 0xB0, 0x2F, 0x0B, 0x48, 0xD0, 0x45, 0x3B, 0xC9,
 0xEF, 0x80, 0x2C, 0xB4, 0xF3, 0xFE, 0x0F, 0xA8, 0x85, 0x6A, 0xC1, 0xE8, 0x8D, 0xE5, 0xEC, 0x5A,
 0x2D, 0x06, 0x50, 0xA9, 0x0E, 0x6B, 0xDF, 0x5C, 0x2A, 0x40, 0xD2, 0xA0, 0xB6, 0x9B, 0xE9, 0xFC,
 0x3A, 0x79, 0x66, 0x6E, 0xA4, 0xD6, 0x75, 0x9C, 0x73, 0x8A, 0x36, 0x76, 0x5F, 0xA2, 0xB1, 0x03,
 0x6F, 0xFD, 0x93, 0xC7, 0x18, 0x6C, 0x10, 0x55, 0xD5, 0x68, 0xCE, 0x9E, 0x74, 0x2E, 0xE4, 0x95,
 0xF9, 0xCB, 0x24, 0x21, 0x99, 0x25, 0x05, 0x17, 0x30, 0x87, 0x1D, 0x20, 0xF7, 0x6D, 0xBB, 0xB7,
 0xC2, 0x4D, 0x9D, 0x62, 0xBF, 0x4A, 0x04, 0xC8, 0x63, 0x35, 0xF1, 0x82, 0x70, 0x57, 0xAD, 0x08,
 0xE0, 0x2B, 0x90, 0xF4, 0x34, 0x41, 0x46, 0xD4, 0x00, 0xF0, 0x29, 0xFA, 0xCC, 0x78, 0x42, 0x8B,
 0x44, 0x02, 0xC4, 0x8C, 0x61, 0x14, 0x83, 0xD7, 0x5D, 0x0C, 0xE6, 0xB8, 0xDA, 0x43, 0xBE, 0x84,
 0x91, 0xEE, 0xDD, 0x33, 0x07, 0x01, 0x1F, 0x23, 0xA7, 0x49, 0x3F, 0xA3, 0x92, 0x9A, 0x9F, 0xE7,
 0x27, 0x3E, 0xB9, 0xED, 0x56, 0xB2, 0x22, 0x1A, 0x86, 0xAB, 0x7C, 0xE1, 0xEB, 0xDC, 0xA1, 0x81,
 0xF6, 0x1E, 0x58, 0x3C, 0x4E, 0x39, 0xCA, 0x53, 0x7A, 0x72, 0xDE, 0x8F, 0xB3, 0x0A, 0x52, 0xD8,
 0x5B, 0x4B, 0xE2, 0x11, 0xAA, 0x71, 0x60, 0x38, 0x67, 0x47, 0xC3, 0x7E, 0xE3, 0x15, 0x94, 0xEA,
 0x54, 0xCF, 0x13, 0xF2, 0x4C, 0xCD, 0xF8, 0xFF, 0xD9, 0x59, 0xD3, 0xC5, 0x5E, 0x51, 0x69, 0xDB,
 0xBA, 0x65, 0xAC, 0x26, 0xA6, 0x77, 0x96, 0x98, 0x12, 0x88, 0x89, 0xAF, 0xAE, 0x7D, 0xB5, 0x28,
 0x64, 0xBD, 0x97, 0xF5, 0xC6, 0xA5, 0x4F, 0xBC, 0x7B, 0x8E, 0x32, 0xC0, 0x1B, 0xD1, 0x16, 0xFB,
 0x0D, 0x1C, 0x3D, 0x37, 0x31, 0x7F, 0x09, 0x19, 0xB0, 0x2F, 0x0B, 0x48, 0xD0, 0x45, 0x3B, 0xC9,
 0xEF, 0x80, 0x2C, 0xB4, 0xF3, 0xFE, 0x0F, 0xA8, 0x85, 0x6A, 0xC1, 0xE8, 0x8D, 0xE5, 0xEC, 0x5A,
 0x2D, 0x06, 0x50, 0xA9, 0x0E, 0x6B, 0xDF, 0x5C, 0x2A, 0x40, 0xD2, 0xA0, 0xB6, 0x9B, 0xE9, 0xFC,
 0x3A, 0x79, 0x66, 0x6E, 0xA4, 0xD6, 0x75, 0x9C, 0x73, 0x8A, 0x36, 0x76, 0x5F, 0xA2, 0xB1, 0x03,
 0x6F, 0xFD, 0x93, 0xC7, 0x18, 0x6C, 0x10, 0x55, 0xD5, 0x68, 0xCE, 0x9E, 0x74, 0x2E, 0xE4, 0x95,
 0xF9, 0xCB, 0x24, 0x21, 0x99, 0x25, 0x05, 0x17, 0x30, 0x87, 0x1D, 0x20, 0xF7, 0x6D, 0xBB, 0xB7,
 0xC2, 0x4D, 0x9D, 0x62, 0xBF, 0x4A, 0x04, 0xC8, 0x63, 0x35, 0xF1, 0x82, 0x70, 0x57, 0xAD, 0x08,
 0xE0, 0x2B, 0x90, 0xF4, 0x34, 0x41, 0x46, 0xD4, 0x00, 0xF0, 0x29, 0xFA, 0xCC, 0x78, 0x42, 0x8B,
 0x44, 0x02, 0xC4, 0x8C, 0x61, 0x14, 0x83, 0xD7, 0x5D, 0x0C, 0xE6, 0xB8, 0xDA, 0x43, 0xBE, 0x84,
 0x91, 0xEE, 0xDD, 0x33, 0x07, 0x01, 0x1F, 0x23, 0xA7, 0x49, 0x3F, 0xA3, 0x92, 0x9A, 0x9F, 0xE7,
 0x27, 0x3E, 0xB9, 0xED, 0x56, 0xB2, 0x22, 0x1A, 0x86, 0xAB, 0x7C, 0xE1, 0xEB, 0xDC, 0xA1, 0x81,
 0xF6, 0x1E, 0x58, 0x3C, 0x4E, 0x39, 0xCA, 0x53, 0x7A, 0x72, 0xDE, 0x8F, 0xB3, 0x0A, 0x52, 0xD8,
 0x5B, 0x4B, 0xE2, 0x11, 0xAA, 0x71, 0x60, 0x38, 0x67, 0x47, 0xC3, 0x7E, 0xE3, 0x15, 0x94, 0xEA,
 0x54, 0xCF, 0x13, 0xF2, 0x4C, 0xCD, 0xF8, 0xFF, 0xD9, 0x59, 0xD3, 0xC5, 0x5E, 0x51, 0x69, 0xDB,
 0xBA, 0x65, 0xAC, 0x26, 0xA6, 0x77, 0x96, 0x98, 0x12, 0x88, 0x89, 0xAF, 0xAE, 0x7D, 0xB5, 0x28,
 0x64, 0xBD, 0x97, 0xF5, 0xC6, 0xA5, 0x4F, 0xBC, 0x7B, 0x8E, 0x32, 0xC0, 0x1B, 0xD1, 0x16, 0xFB,
 0x0D, 0x1C, 0x3D, 0x37, 0x31, 0x7F, 0x09, 0x19, 0xB0, 0x2F, 0x0B, 0x48, 0xD0, 0x45, 0x3B, 0xC9,
 0xEF, 0x80, 0x2C, 0xB4, 0xF3, 0xFE, 0x0F, 0xA8, 0x85, 0x6A, 0xC1, 0xE8, 0x8D, 0xE5, 0xEC, 0x5A,
 0x2D, 0x06, 0x50, 0xA9, 0x0E, 0x6B, 0xDF, 0x5C, 0x2A, 0x40, 0xD2, 0xA0, 0xB6, 0x9B, 0xE9, 0xFC,
 0x3A, 0x79, 0x66, 0x6E, 0xA4, 0xD6, 0x75, 0x9C, 0x73, 0x8A, 0x36, 0x76, 0x5F, 0xA2, 0xB1, 0x03,
 0x6F, 0xFD, 0x93, 0xC7, 0x18, 0x6C, 0x10, 0x55, 0xD5, 0x68, 0xCE, 0x9E, 0x74, 0x2E, 0xE4, 0x95,
 0xF9, 0xCB, 0x24, 0x21, 0x99, 0x25, 0x05, 0x17, 0x30, 0x87, 0x1D, 0x20, 0xF7, 0x6D, 0xBB, 0xB7,
 0xC2, 0x4D, 0x9D, 0x62, 0xBF, 0x4A, 0x04, 0xC8, 0x63, 0x35, 0xF1, 0x82, 0x70, 0x57, 0xAD, 0x08,
 0xE0, 0x2B, 0x90, 0xF4, 0x34, 0x41, 0x46, 0xD4, 0x00, 0xF0, 0x29, 0xFA, 0xCC, 0x78, 0x42, 0x8B,
 0x44, 0x02, 0xC4, 0x8C, 0x61, 0x14, 0x83, 0xD7, 0x5D, 0x0C, 0xE6, 0xB8, 0xDA, 0x43, 0xBE, 0x84,
 0x91, 0xEE, 0xDD, 0x33, 0x07, 0x01, 0x1F, 0x23, 0xA7, 0x49, 0x3F, 0xA3, 0x92, 0x9A, 0x9F, 0xE7
 };

// Double normal size, avoids modulo/mask operation
extern const unsigned char xrSBoxC[512] = {
 0x01, 0xEC, 0xFC, 0x18, 0x26, 0x78, 0x6D, 0xD0, 0xDB, 0xE5, 0x1B, 0xC7, 0xD9, 0x7D, 0xE8, 0xFD,
 0x79, 0xBE, 0x68, 0xD3, 0x74, 0xE0, 0x0A, 0x11, 0x61, 0xED, 0x2A, 0x6C, 0x7E, 0x0E, 0xF8, 0x4C,
 0x6A, 0xCF, 0xE3, 0x28, 0x9F, 0x87, 0x86, 0x52, 0x85, 0xF5, 0x3A, 0x44, 0x81, 0xC2, 0xE6, 0xAC,
 0x20, 0x8F, 0x8C, 0x53, 0x1A, 0x40, 0xC3, 0xB3, 0xCC, 0xD4, 0x6B, 0x0C, 0xA7, 0xEB, 0xFE, 0xC1,
 0xC0, 0x32, 0xAE, 0xAD, 0xD8, 0x17, 0xF4, 0x77, 0x07, 0x8A, 0x66, 0x6E, 0x67, 0x5D, 0x5A, 0x70,
 0x62, 0x90, 0x84, 0xE7, 0x4A, 0x73, 0xA9, 0xC8, 0x16, 0x29, 0x64, 0xF9, 0x22, 0x93, 0x0D, 0xA2,
 0xAB, 0x30, 0x38, 0x4E, 0xBF, 0x71, 0xE1, 0x0B, 0x57, 0x48, 0x46, 0x02, 0x63, 0x9A, 0xAF, 0x9C,
 0xBD, 0x00, 0x65, 0xBB, 0xA4, 0x03, 0xF3, 0xCD, 0x2B, 0x4B, 0xCE, 0x3F, 0x9E, 0xD7, 0x2D, 0x04,
 0xFB, 0x69, 0x23, 0xC4, 0x36, 0x9D, 0xA6, 0x42, 0xB6, 0x4D, 0xF1, 0x54, 0xBA, 0x09, 0x2F, 0x75,
 0x25, 0x7F, 0x3C, 0xD2, 0x27, 0xE9, 0x6F, 0xB5, 0xF2, 0x35, 0x47, 0xDD, 0x13, 0x21, 0xB2, 0xD1,
 0xDF, 0x14, 0xAA, 0x97, 0x08, 0x43, 0x41, 0x1C, 0x8D, 0x98, 0x60, 0x06, 0xA3, 0x5C, 0x1D, 0x96,
 0x15, 0x37, 0x1F, 0x83, 0xA5, 0x91, 0x33, 0x99, 0x5F, 0x7B, 0xB7, 0x55, 0xA8, 0xFA, 0xB9, 0xCB,
 0x94, 0xC9, 0x3D, 0x24, 0xEE, 0x0F, 0x50, 0xDC, 0x2E, 0xBC, 0x7C, 0x58, 0xF7, 0xFF, 0x3B, 0x05,
 0x49, 0x9B, 0x2C, 0x82, 0x34, 0xA1, 0xEA, 0xDE, 0x89, 0x39, 0x8B, 0xEF, 0xB4, 0x31, 0xD5, 0xCA,
 0x92, 0xE4, 0xB1, 0x88, 0x51, 0x3E, 0x5B, 0x19, 0x59, 0xB0, 0x95, 0x76, 0xC5, 0x1E, 0x7A, 0xA0,
 0x5E, 0x10, 0x12, 0x8E, 0xF0, 0x72, 0xD6, 0x80, 0xDA, 0x56, 0x4F, 0xB8, 0xE2, 0x45, 0xC6, 0xF6,
 0x01, 0xEC, 0xFC, 0x18, 0x26, 0x78, 0x6D, 0xD0, 0xDB, 0xE5, 0x1B, 0xC7, 0xD9, 0x7D, 0xE8, 0xFD,
 0x79, 0xBE, 0x68, 0xD3, 0x74, 0xE0, 0x0A, 0x11, 0x61, 0xED, 0x2A, 0x6C, 0x7E, 0x0E, 0xF8, 0x4C,
 0x6A, 0xCF, 0xE3, 0x28, 0x9F, 0x87, 0x86, 0x52, 0x85, 0xF5, 0x3A, 0x44, 0x81, 0xC2, 0xE6, 0xAC,
 0x20, 0x8F, 0x8C, 0x53, 0x1A, 0x40, 0xC3, 0xB3, 0xCC, 0xD4, 0x6B, 0x0C, 0xA7, 0xEB, 0xFE, 0xC1,
 0xC0, 0x32, 0xAE, 0xAD, 0xD8, 0x17, 0xF4, 0x77, 0x07, 0x8A, 0x66, 0x6E, 0x67, 0x5D, 0x5A, 0x70,
 0x62, 0x90, 0x84, 0xE7, 0x4A, 0x73, 0xA9, 0xC8, 0x16, 0x29, 0x64, 0xF9, 0x22, 0x93, 0x0D, 0xA2,
 0xAB, 0x30, 0x38, 0x4E, 0xBF, 0x71, 0xE1, 0x0B, 0x57, 0x48, 0x46, 0x02, 0x63, 0x9A, 0xAF, 0x9C,
 0xBD, 0x00, 0x65, 0xBB, 0xA4, 0x03, 0xF3, 0xCD, 0x2B, 0x4B, 0xCE, 0x3F, 0x9E, 0xD7, 0x2D, 0x04,
 0xFB, 0x69, 0x23, 0xC4, 0x36, 0x9D, 0xA6, 0x42, 0xB6, 0x4D, 0xF1, 0x54, 0xBA, 0x09, 0x2F, 0x75,
 0x25, 0x7F, 0x3C, 0xD2, 0x27, 0xE9, 0x6F, 0xB5, 0xF2, 0x35, 0x47, 0xDD, 0x13, 0x21, 0xB2, 0xD1,
 0xDF, 0x14, 0xAA, 0x97, 0x08, 0x43, 0x41, 0x1C, 0x8D, 0x98, 0x60, 0x06, 0xA3, 0x5C, 0x1D, 0x96,
 0x15, 0x37, 0x1F, 0x83, 0xA5, 0x91, 0x33, 0x99, 0x5F, 0x7B, 0xB7, 0x55, 0xA8, 0xFA, 0xB9, 0xCB,
 0x94, 0xC9, 0x3D, 0x24, 0xEE, 0x0F, 0x50, 0xDC, 0x2E, 0xBC, 0x7C, 0x58, 0xF7, 0xFF, 0x3B, 0x05,
 0x49, 0x9B, 0x2C, 0x82, 0x34, 0xA1, 0xEA, 0xDE, 0x89, 0x39, 0x8B, 0xEF, 0xB4, 0x31, 0xD5, 0xCA,
 0x92, 0xE4, 0xB1, 0x88, 0x51, 0x3E, 0x5B, 0x19, 0x59, 0xB0, 0x95, 0x76, 0xC5, 0x1E, 0x7A, 0xA0,
 0x5E, 0x10, 0x12, 0x8E, 0xF0, 0x72, 0xD6, 0x80, 0xDA, 0x56, 0x4F, 0xB8, 0xE2, 0x45, 0xC6, 0xF6
 };

// Double normal size, avoids modulo/mask operation
extern const unsigned char xrSBoxD[512] = {
 0x38, 0x5A, 0x65, 0xFA, 0xE9, 0xCE, 0x80, 0x69, 0x7A, 0x54, 0xAE, 0x99, 0x4E, 0x34, 0x36, 0x97,
 0xF3, 0xC0, 0x4A, 0x7C, 0x6E, 0xA5, 0xC7, 0xE0, 0x24, 0x19, 0xAC, 0x9E, 0x29, 0x26, 0x8A, 0x5E,
 0xF8, 0x56, 0xF7, 0x6B, 0xA6, 0x27, 0xEA, 0x3E, 0x18, 0xC1, 0x1C, 0xAA, 0xD3, 0x2F, 0x2A, 0xB8,
 0xB7, 0x93, 0xBA, 0x76, 0x72, 0x9D, 0x3A, 0x2E, 0x90, 0x98, 0xC2, 0x7F, 0xA3, 0x4F, 0xC8, 0xBD,
 0x3C, 0x9C, 0x8F, 0x78, 0x81, 0x0A, 0x85, 0xE7, 0x0C, 0xB6, 0xD1, 0x1B, 0x12, 0x37, 0xB2, 0x45,
 0xCC, 0xDB, 0xD7, 0xB4, 0x7E, 0xB1, 0xCA, 0xCF, 0xA2, 0xAF, 0xD0, 0xDE, 0x60, 0xE4, 0x42, 0xFB,
 0xDA, 0xE6, 0x9B, 0x73, 0x4C, 0x92, 0x52, 0x87, 0x05, 0x2B, 0xEB, 0x5B, 0x6C, 0x6F, 0xAD, 0x03,
 0x1A, 0x44, 0x96, 0x4B, 0x57, 0x7B, 0x84, 0x8C, 0x64, 0x8E, 0x02, 0x22, 0xA0, 0xCB, 0x43, 0xE2,
 0xB0, 0xD4, 0x17, 0x5D, 0xD2, 0x11, 0x14, 0x6A, 0x3F, 0x68, 0x7D, 0xDF, 0x23, 0x15, 0x5C, 0x09,
 0xBF, 0xED, 0x1E, 0x86, 0x48, 0x66, 0x32, 0x49, 0xFE, 0xEC, 0x41, 0x07, 0x25, 0x4D, 0x13, 0x16,
 0xAB, 0x79, 0x83, 0xA8, 0x8B, 0x59, 0xD9, 0x89, 0x0D, 0xB5, 0x55, 0x0E, 0xF5, 0xDC, 0x82, 0x0B,
 0xB9, 0x2D, 0xD6, 0xEE, 0xC6, 0x51, 0x62, 0xC9, 0x08, 0xF2, 0xF0, 0xFC, 0x88, 0x9A, 0x46, 0x1D,
 0x21, 0xF4, 0xE5, 0xA4, 0x10, 0xF1, 0x0F, 0xE8, 0xE1, 0x95, 0xCD, 0xBC, 0xA7, 0x50, 0x70, 0xC3,
 0xA1, 0x3D, 0xD8, 0x47, 0x01, 0x40, 0x33, 0x5F, 0xFD, 0x06, 0x3B, 0x1F, 0x67, 0x39, 0xF9, 0x2C,
 0xA9, 0xD5, 0x91, 0xBB, 0x77, 0x20, 0x53, 0x30, 0x94, 0xC4, 0xB3, 0xE3, 0xFF, 0x04, 0x31, 0x74,
 0xBE, 0x8D, 0xEF, 0x00, 0x28, 0x58, 0xDD, 0x35, 0x6D, 0xC5, 0x9F, 0x75, 0x63, 0x61, 0x71, 0xF6,
 0x38, 0x5A, 0x65, 0xFA, 0xE9, 0xCE, 0x80, 0x69, 0x7A, 0x54, 0xAE, 0x99, 0x4E, 0x34, 0x36, 0x97,
 0xF3, 0xC0, 0x4A, 0x7C, 0x6E, 0xA5, 0xC7, 0xE0, 0x24, 0x19, 0xAC, 0x9E, 0x29, 0x26, 0x8A, 0x5E,
 0xF8, 0x56, 0xF7, 0x6B, 0xA6, 0x27, 0xEA, 0x3E, 0x18, 0xC1, 0x1C, 0xAA, 0xD3, 0x2F, 0x2A, 0xB8,
 0xB7, 0x93, 0xBA, 0x76, 0x72, 0x9D, 0x3A, 0x2E, 0x90, 0x98, 0xC2, 0x7F, 0xA3, 0x4F, 0xC8, 0xBD,
 0x3C, 0x9C, 0x8F, 0x78, 0x81, 0x0A, 0x85, 0xE7, 0x0C, 0xB6, 0xD1, 0x1B, 0x12, 0x37, 0xB2, 0x45,
 0xCC, 0xDB, 0xD7, 0xB4, 0x7E, 0xB1, 0xCA, 0xCF, 0xA2, 0xAF, 0xD0, 0xDE, 0x60, 0xE4, 0x42, 0xFB,
 0xDA, 0xE6, 0x9B, 0x73, 0x4C, 0x92, 0x52, 0x87, 0x05, 0x2B, 0xEB, 0x5B, 0x6C, 0x6F, 0xAD, 0x03,
 0x1A, 0x44, 0x96, 0x4B, 0x57, 0x7B, 0x84, 0x8C, 0x64, 0x8E, 0x02, 0x22, 0xA0, 0xCB, 0x43, 0xE2,
 0xB0, 0xD4, 0x17, 0x5D, 0xD2, 0x11, 0x14, 0x6A, 0x3F, 0x68, 0x7D, 0xDF, 0x23, 0x15, 0x5C, 0x09,
 0xBF, 0xED, 0x1E, 0x86, 0x48, 0x66, 0x32, 0x49, 0xFE, 0xEC, 0x41, 0x07, 0x25, 0x4D, 0x13, 0x16,
 0xAB, 0x79, 0x83, 0xA8, 0x8B, 0x59, 0xD9, 0x89, 0x0D, 0xB5, 0x55, 0x0E, 0xF5, 0xDC, 0x82, 0x0B,
 0xB9, 0x2D, 0xD6, 0xEE, 0xC6, 0x51, 0x62, 0xC9, 0x08, 0xF2, 0xF0, 0xFC, 0x88, 0x9A, 0x46, 0x1D,
 0x21, 0xF4, 0xE5, 0xA4, 0x10, 0xF1, 0x0F, 0xE8, 0xE1, 0x95, 0xCD, 0xBC, 0xA7, 0x50, 0x70, 0xC3,
 0xA1, 0x3D, 0xD8, 0x47, 0x01, 0x40, 0x33, 0x5F, 0xFD, 0x06, 0x3B, 0x1F, 0x67, 0x39, 0xF9, 0x2C,
 0xA9, 0xD5, 0x91, 0xBB, 0x77, 0x20, 0x53, 0x30, 0x94, 0xC4, 0xB3, 0xE3, 0xFF, 0x04, 0x31, 0x74,
 0xBE, 0x8D, 0xEF, 0x00, 0x28, 0x58, 0xDD, 0x35, 0x6D, 0xC5, 0x9F, 0x75, 0x63, 0x61, 0x71, 0xF6
 };

extern const unsigned char xrSBoxE[256] = {
 0xA1, 0x25, 0xDA, 0xC1, 0xAD, 0x22, 0x10, 0x2E, 0x1C, 0x58, 0xAE, 0x5F, 0x68, 0xF5, 0xCD, 0x37,
 0xE4, 0x6C, 0xEC, 0x65, 0xEF, 0xFD, 0x29, 0x64, 0x76, 0xA4, 0xE9, 0x67, 0xBA, 0xE2, 0x12, 0x05,
 0xFE, 0x51, 0xFF, 0xE6, 0x5A, 0xB6, 0x06, 0x4A, 0xF1, 0x85, 0xED, 0x3B, 0x88, 0x4B, 0x90, 0x26,
 0x80, 0x31, 0x07, 0x53, 0x8D, 0x57, 0x3A, 0x20, 0xF2, 0xD7, 0x32, 0xE3, 0x09, 0x19, 0xC5, 0xE7,
 0x08, 0xC8, 0x69, 0x75, 0xF6, 0x27, 0xB1, 0x43, 0x6E, 0xDB, 0xA7, 0x86, 0x00, 0xDC, 0x77, 0x54,
 0xB0, 0xD5, 0x0C, 0x34, 0x33, 0x4F, 0x60, 0x5B, 0x63, 0x98, 0x93, 0xB8, 0xD2, 0xA2, 0x3C, 0xDE,
 0x74, 0x24, 0xF8, 0x95, 0x03, 0x71, 0x5E, 0xDF, 0x9E, 0xF4, 0xFB, 0x73, 0xD3, 0xA8, 0x0E, 0x02,
 0x2B, 0xF0, 0x7F, 0xAC, 0xAA, 0x66, 0x14, 0x5C, 0x0D, 0x23, 0x35, 0x70, 0x30, 0x42, 0x7B, 0x50,
 0x45, 0x5D, 0x49, 0xBE, 0xD6, 0x2A, 0x94, 0x1B, 0x82, 0x2D, 0x7D, 0xF7, 0xA6, 0xBF, 0x38, 0x28,
 0x9D, 0xB3, 0x81, 0xC2, 0xFC, 0x84, 0xA3, 0xBC, 0x97, 0xAF, 0x89, 0xC7, 0x3F, 0x1A, 0xAB, 0x56,
 0xEB, 0x99, 0x9C, 0x13, 0x83, 0xE1, 0x18, 0x92, 0x3E, 0xC6, 0x55, 0x0B, 0xA0, 0x91, 0xD8, 0xF9,
 0xCF, 0xC9, 0xBD, 0x79, 0x17, 0x72, 0x2C, 0x47, 0x8C, 0x40, 0x1E, 0xDD, 0x36, 0x16, 0x7C, 0x0F,
 0xEE, 0xB5, 0x52, 0x39, 0x59, 0xBB, 0x9A, 0x4D, 0x87, 0xB2, 0x7E, 0xF3, 0x8E, 0x15, 0x01, 0x6D,
 0xE5, 0x62, 0xB4, 0x04, 0x2F, 0x4C, 0x7A, 0x8F, 0x1F, 0x6B, 0x61, 0xCB, 0xA9, 0x6F, 0x96, 0xA5,
 0xCE, 0x48, 0xD1, 0xFA, 0x8B, 0xD0, 0x9B, 0xEA, 0x41, 0xC3, 0xD9, 0xD4, 0xC0, 0xC4, 0xE8, 0x11,
 0x8A, 0xB7, 0xCC, 0x78, 0x6A, 0x9F, 0x3D, 0x21, 0x0A, 0x1D, 0x46, 0x4E, 0xCA, 0x44, 0xE0, 0xB9
 };

// Three times normal size, avoids modulo/mask operation
extern const unsigned char xrSBoxF[768] = {
 0x7A, 0xBC, 0xC7, 0xC4, 0x54, 0xCC, 0x89, 0x5E, 0xDF, 0xF4, 0x36, 0xB6, 0xF9, 0x2C, 0x79, 0x45,
 0x46, 0x71, 0xA7, 0x96, 0x26, 0xCA, 0x5B, 0x88, 0x37, 0xB3, 0x17, 0xD4, 0x72, 0xA6, 0x87, 0x86,
 0xC8, 0xE6, 0x11, 0xC5, 0x20, 0x0D, 0x92, 0x1C, 0xE1, 0x7B, 0xA9, 0x4E, 0x62, 0xDD, 0xBE, 0xE8,
 0xAD, 0x9B, 0x47, 0x6E, 0x10, 0x3A, 0xAF, 0xB2, 0x0C, 0x4A, 0xED, 0x5F, 0x18, 0x1F, 0x08, 0xDB,
 0xE7, 0x23, 0xA2, 0x04, 0x8B, 0x59, 0x9F, 0xE4, 0x40, 0xFF, 0xDA, 0x00, 0x05, 0x3F, 0x70, 0x73,
 0x1E, 0x55, 0x7F, 0x2D, 0x16, 0x30, 0x61, 0xB1, 0x65, 0xDC, 0x9C, 0x12, 0xA3, 0x95, 0x07, 0x0B,
 0xC6, 0x2A, 0xE5, 0x3B, 0x6A, 0x68, 0xF5, 0xD0, 0xD6, 0xEA, 0x3D, 0xEC, 0x85, 0x13, 0x60, 0x8F,
 0xD8, 0xA8, 0x39, 0x6F, 0x9D, 0x77, 0xB0, 0xFA, 0x31, 0x67, 0xE3, 0xBA, 0x8C, 0xFD, 0x41, 0xB9,
 0x5C, 0x91, 0x82, 0x28, 0xCF, 0x6C, 0x83, 0x50, 0x1B, 0x75, 0x8E, 0x15, 0xAB, 0xE0, 0x4D, 0x80,
 0x74, 0x7E, 0xC2, 0x90, 0xD2, 0xB7, 0x33, 0xD5, 0x38, 0xB4, 0x1D, 0xA4, 0xEF, 0x8A, 0x27, 0x6B,
 0xD7, 0x63, 0xFE, 0x78, 0xB8, 0x66, 0xBF, 0xF2, 0xC9, 0x9E, 0x8D, 0x56, 0xBB, 0x24, 0xCE, 0xF6,
 0x2F, 0xD9, 0xF1, 0x34, 0xA1, 0x42, 0xFB, 0x6D, 0x2B, 0x5A, 0xC3, 0x3C, 0xAE, 0x52, 0x48, 0x7D,
 0x49, 0xEB, 0xC1, 0x09, 0x93, 0xF3, 0x64, 0x01, 0x44, 0x9A, 0x84, 0x53, 0x29, 0x19, 0xE9, 0xA5,
 0xBD, 0xD1, 0x4B, 0x58, 0x43, 0xF0, 0x81, 0xC0, 0xE2, 0x94, 0x97, 0x57, 0x32, 0x14, 0x02, 0xF7,
 0x99, 0x3E, 0xCD, 0x5D, 0x76, 0x03, 0xAA, 0xD3, 0x7C, 0x0F, 0xF8, 0x06, 0x35, 0x1A, 0x2E, 0xFC,
 0xB5, 0xDE, 0xA0, 0x69, 0xEE, 0x4F, 0x4C, 0x0A, 0x21, 0x51, 0x22, 0x98, 0xCB, 0x0E, 0x25, 0xAC,
 0x7A, 0xBC, 0xC7, 0xC4, 0x54, 0xCC, 0x89, 0x5E, 0xDF, 0xF4, 0x36, 0xB6, 0xF9, 0x2C, 0x79, 0x45,
 0x46, 0x71, 0xA7, 0x96, 0x26, 0xCA, 0x5B, 0x88, 0x37, 0xB3, 0x17, 0xD4, 0x72, 0xA6, 0x87, 0x86,
 0xC8, 0xE6, 0x11, 0xC5, 0x20, 0x0D, 0x92, 0x1C, 0xE1, 0x7B, 0xA9, 0x4E, 0x62, 0xDD, 0xBE, 0xE8,
 0xAD, 0x9B, 0x47, 0x6E, 0x10, 0x3A, 0xAF, 0xB2, 0x0C, 0x4A, 0xED, 0x5F, 0x18, 0x1F, 0x08, 0xDB,
 0xE7, 0x23, 0xA2, 0x04, 0x8B, 0x59, 0x9F, 0xE4, 0x40, 0xFF, 0xDA, 0x00, 0x05, 0x3F, 0x70, 0x73,
 0x1E, 0x55, 0x7F, 0x2D, 0x16, 0x30, 0x61, 0xB1, 0x65, 0xDC, 0x9C, 0x12, 0xA3, 0x95, 0x07, 0x0B,
 0xC6, 0x2A, 0xE5, 0x3B, 0x6A, 0x68, 0xF5, 0xD0, 0xD6, 0xEA, 0x3D, 0xEC, 0x85, 0x13, 0x60, 0x8F,
 0xD8, 0xA8, 0x39, 0x6F, 0x9D, 0x77, 0xB0, 0xFA, 0x31, 0x67, 0xE3, 0xBA, 0x8C, 0xFD, 0x41, 0xB9,
 0x5C, 0x91, 0x82, 0x28, 0xCF, 0x6C, 0x83, 0x50, 0x1B, 0x75, 0x8E, 0x15, 0xAB, 0xE0, 0x4D, 0x80,
 0x74, 0x7E, 0xC2, 0x90, 0xD2, 0xB7, 0x33, 0xD5, 0x38, 0xB4, 0x1D, 0xA4, 0xEF, 0x8A, 0x27, 0x6B,
 0xD7, 0x63, 0xFE, 0x78, 0xB8, 0x66, 0xBF, 0xF2, 0xC9, 0x9E, 0x8D, 0x56, 0xBB, 0x24, 0xCE, 0xF6,
 0x2F, 0xD9, 0xF1, 0x34, 0xA1, 0x42, 0xFB, 0x6D, 0x2B, 0x5A, 0xC3, 0x3C, 0xAE, 0x52, 0x48, 0x7D,
 0x49, 0xEB, 0xC1, 0x09, 0x93, 0xF3, 0x64, 0x01, 0x44, 0x9A, 0x84, 0x53, 0x29, 0x19, 0xE9, 0xA5,
 0xBD, 0xD1, 0x4B, 0x58, 0x43, 0xF0, 0x81, 0xC0, 0xE2, 0x94, 0x97, 0x57, 0x32, 0x14, 0x02, 0xF7,
 0x99, 0x3E, 0xCD, 0x5D, 0x76, 0x03, 0xAA, 0xD3, 0x7C, 0x0F, 0xF8, 0x06, 0x35, 0x1A, 0x2E, 0xFC,
 0xB5, 0xDE, 0xA0, 0x69, 0xEE, 0x4F, 0x4C, 0x0A, 0x21, 0x51, 0x22, 0x98, 0xCB, 0x0E, 0x25, 0xAC,
 0x7A, 0xBC, 0xC7, 0xC4, 0x54, 0xCC, 0x89, 0x5E, 0xDF, 0xF4, 0x36, 0xB6, 0xF9, 0x2C, 0x79, 0x45,
 0x46, 0x71, 0xA7, 0x96, 0x26, 0xCA, 0x5B, 0x88, 0x37, 0xB3, 0x17, 0xD4, 0x72, 0xA6, 0x87, 0x86,
 0xC8, 0xE6, 0x11, 0xC5, 0x20, 0x0D, 0x92, 0x1C, 0xE1, 0x7B, 0xA9, 0x4E, 0x62, 0xDD, 0xBE, 0xE8,
 0xAD, 0x9B, 0x47, 0x6E, 0x10, 0x3A, 0xAF, 0xB2, 0x0C, 0x4A, 0xED, 0x5F, 0x18, 0x1F, 0x08, 0xDB,
 0xE7, 0x23, 0xA2, 0x04, 0x8B, 0x59, 0x9F, 0xE4, 0x40, 0xFF, 0xDA, 0x00, 0x05, 0x3F, 0x70, 0x73,
 0x1E, 0x55, 0x7F, 0x2D, 0x16, 0x30, 0x61, 0xB1, 0x65, 0xDC, 0x9C, 0x12, 0xA3, 0x95, 0x07, 0x0B,
 0xC6, 0x2A, 0xE5, 0x3B, 0x6A, 0x68, 0xF5, 0xD0, 0xD6, 0xEA, 0x3D, 0xEC, 0x85, 0x13, 0x60, 0x8F,
 0xD8, 0xA8, 0x39, 0x6F, 0x9D, 0x77, 0xB0, 0xFA, 0x31, 0x67, 0xE3, 0xBA, 0x8C, 0xFD, 0x41, 0xB9,
 0x5C, 0x91, 0x82, 0x28, 0xCF, 0x6C, 0x83, 0x50, 0x1B, 0x75, 0x8E, 0x15, 0xAB, 0xE0, 0x4D, 0x80,
 0x74, 0x7E, 0xC2, 0x90, 0xD2, 0xB7, 0x33, 0xD5, 0x38, 0xB4, 0x1D, 0xA4, 0xEF, 0x8A, 0x27, 0x6B,
 0xD7, 0x63, 0xFE, 0x78, 0xB8, 0x66, 0xBF, 0xF2, 0xC9, 0x9E, 0x8D, 0x56, 0xBB, 0x24, 0xCE, 0xF6,
 0x2F, 0xD9, 0xF1, 0x34, 0xA1, 0x42, 0xFB, 0x6D, 0x2B, 0x5A, 0xC3, 0x3C, 0xAE, 0x52, 0x48, 0x7D,
 0x49, 0xEB, 0xC1, 0x09, 0x93, 0xF3, 0x64, 0x01, 0x44, 0x9A, 0x84, 0x53, 0x29, 0x19, 0xE9, 0xA5,
 0xBD, 0xD1, 0x4B, 0x58, 0x43, 0xF0, 0x81, 0xC0, 0xE2, 0x94, 0x97, 0x57, 0x32, 0x14, 0x02, 0xF7,
 0x99, 0x3E, 0xCD, 0x5D, 0x76, 0x03, 0xAA, 0xD3, 0x7C, 0x0F, 0xF8, 0x06, 0x35, 0x1A, 0x2E, 0xFC,
 0xB5, 0xDE, 0xA0, 0x69, 0xEE, 0x4F, 0x4C, 0x0A, 0x21, 0x51, 0x22, 0x98, 0xCB, 0x0E, 0x25, 0xAC
 };

// Double normal size, avoids modulo/mask operation
extern const unsigned char xrSBoxG[512] = {
 0xEF, 0xF2, 0x1A, 0x9B, 0x39, 0x8F, 0x85, 0x87, 0x64, 0x37, 0x94, 0x03, 0xF3, 0xA0, 0xCA, 0x05,
 0x22, 0x9F, 0x10, 0xCD, 0x01, 0x8A, 0x71, 0x1E, 0x24, 0xE3, 0xB4, 0xC7, 0x06, 0xDA, 0x18, 0xAA,
 0xA5, 0xA7, 0xC2, 0x2E, 0x2F, 0xB0, 0xC5, 0x09, 0x8E, 0xCF, 0xD9, 0xBA, 0x38, 0x3B, 0x57, 0x91,
 0xE8, 0x5F, 0x7B, 0x60, 0xDD, 0x95, 0x72, 0xE5, 0x6C, 0xC8, 0x1B, 0xFA, 0x0E, 0xB1, 0x35, 0xCB,
 0x2A, 0x83, 0x76, 0x68, 0x63, 0x6B, 0x1F, 0x3A, 0x73, 0xB8, 0x9D, 0xDC, 0xD7, 0xDF, 0xAC, 0xB6,
 0x62, 0xA6, 0xE7, 0xE1, 0x6E, 0x8B, 0xD5, 0x8D, 0x47, 0x70, 0xED, 0xB3, 0x11, 0x1D, 0x20, 0x52,
 0x27, 0xF9, 0x07, 0x6F, 0xB2, 0xF0, 0x59, 0x0F, 0x42, 0xBB, 0x28, 0xBD, 0xBE, 0x96, 0x93, 0xC0,
 0x79, 0xC6, 0x9C, 0xA3, 0x7C, 0x74, 0x16, 0x7A, 0x08, 0x12, 0xBF, 0x9E, 0x33, 0xEA, 0x67, 0x02,
 0x9A, 0xC1, 0x30, 0xF7, 0x99, 0x2D, 0xEB, 0xDE, 0xA4, 0x7D, 0x34, 0xCC, 0x3E, 0x23, 0x6D, 0x48,
 0x4F, 0x66, 0x13, 0xF6, 0x45, 0x54, 0x3F, 0x53, 0x89, 0xC9, 0x58, 0x04, 0xF1, 0xB5, 0xAD, 0xA2,
 0x0D, 0xAB, 0xE2, 0xB9, 0x90, 0x5C, 0x50, 0x78, 0x4B, 0x86, 0xA9, 0x51, 0x65, 0x3C, 0x4A, 0x7F,
 0xEC, 0xCE, 0x75, 0x4D, 0xD4, 0x5E, 0xFD, 0x5D, 0xC4, 0x26, 0xAE, 0xFF, 0xEE, 0x56, 0x44, 0x36,
 0xD3, 0x0B, 0x31, 0x97, 0x80, 0x25, 0x19, 0x17, 0x69, 0xFE, 0x41, 0x4C, 0xF8, 0x61, 0x5B, 0x1C,
 0xD6, 0x15, 0x21, 0x43, 0x5A, 0xD1, 0x81, 0x32, 0xD2, 0x6A, 0x55, 0xB7, 0x7E, 0xD8, 0x40, 0xDB,
 0x4E, 0xE0, 0x2B, 0x82, 0x8C, 0xF4, 0xE6, 0x29, 0x49, 0xFC, 0x00, 0xC3, 0x14, 0x77, 0xE9, 0xD0,
 0xA8, 0x46, 0x98, 0x84, 0x0C, 0x3D, 0xBC, 0xFB, 0x88, 0x2C, 0x92, 0xF5, 0xE4, 0x0A, 0xAF, 0xA1,
 0xEF, 0xF2, 0x1A, 0x9B, 0x39, 0x8F, 0x85, 0x87, 0x64, 0x37, 0x94, 0x03, 0xF3, 0xA0, 0xCA, 0x05,
 0x22, 0x9F, 0x10, 0xCD, 0x01, 0x8A, 0x71, 0x1E, 0x24, 0xE3, 0xB4, 0xC7, 0x06, 0xDA, 0x18, 0xAA,
 0xA5, 0xA7, 0xC2, 0x2E, 0x2F, 0xB0, 0xC5, 0x09, 0x8E, 0xCF, 0xD9, 0xBA, 0x38, 0x3B, 0x57, 0x91,
 0xE8, 0x5F, 0x7B, 0x60, 0xDD, 0x95, 0x72, 0xE5, 0x6C, 0xC8, 0x1B, 0xFA, 0x0E, 0xB1, 0x35, 0xCB,
 0x2A, 0x83, 0x76, 0x68, 0x63, 0x6B, 0x1F, 0x3A, 0x73, 0xB8, 0x9D, 0xDC, 0xD7, 0xDF, 0xAC, 0xB6,
 0x62, 0xA6, 0xE7, 0xE1, 0x6E, 0x8B, 0xD5, 0x8D, 0x47, 0x70, 0xED, 0xB3, 0x11, 0x1D, 0x20, 0x52,
 0x27, 0xF9, 0x07, 0x6F, 0xB2, 0xF0, 0x59, 0x0F, 0x42, 0xBB, 0x28, 0xBD, 0xBE, 0x96, 0x93, 0xC0,
 0x79, 0xC6, 0x9C, 0xA3, 0x7C, 0x74, 0x16, 0x7A, 0x08, 0x12, 0xBF, 0x9E, 0x33, 0xEA, 0x67, 0x02,
 0x9A, 0xC1, 0x30, 0xF7, 0x99, 0x2D, 0xEB, 0xDE, 0xA4, 0x7D, 0x34, 0xCC, 0x3E, 0x23, 0x6D, 0x48,
 0x4F, 0x66, 0x13, 0xF6, 0x45, 0x54, 0x3F, 0x53, 0x89, 0xC9, 0x58, 0x04, 0xF1, 0xB5, 0xAD, 0xA2,
 0x0D, 0xAB, 0xE2, 0xB9, 0x90, 0x5C, 0x50, 0x78, 0x4B, 0x86, 0xA9, 0x51, 0x65, 0x3C, 0x4A, 0x7F,
 0xEC, 0xCE, 0x75, 0x4D, 0xD4, 0x5E, 0xFD, 0x5D, 0xC4, 0x26, 0xAE, 0xFF, 0xEE, 0x56, 0x44, 0x36,
 0xD3, 0x0B, 0x31, 0x97, 0x80, 0x25, 0x19, 0x17, 0x69, 0xFE, 0x41, 0x4C, 0xF8, 0x61, 0x5B, 0x1C,
 0xD6, 0x15, 0x21, 0x43, 0x5A, 0xD1, 0x81, 0x32, 0xD2, 0x6A, 0x55, 0xB7, 0x7E, 0xD8, 0x40, 0xDB,
 0x4E, 0xE0, 0x2B, 0x82, 0x8C, 0xF4, 0xE6, 0x29, 0x49, 0xFC, 0x00, 0xC3, 0x14, 0x77, 0xE9, 0xD0,
 0xA8, 0x46, 0x98, 0x84, 0x0C, 0x3D, 0xBC, 0xFB, 0x88, 0x2C, 0x92, 0xF5, 0xE4, 0x0A, 0xAF, 0xA1
 };

// Double normal size, avoids modulo/mask operation
extern const unsigned char xrSBoxH[512] = {
 0xF3, 0x10, 0xDF, 0x9A, 0x52, 0x34, 0x31, 0x9E, 0xAD, 0xC7, 0x76, 0x6E, 0xE9, 0x46, 0xD0, 0x00,
 0xDA, 0xAA, 0x2D, 0x4B, 0x9D, 0x5B, 0x95, 0x70, 0x7A, 0x60, 0x07, 0x87, 0x1F, 0x80, 0xBD, 0x75,
 0x99, 0xDE, 0x29, 0x20, 0xFB, 0xCB, 0xBE, 0xD8, 0x1A, 0x38, 0xF1, 0x08, 0xE7, 0x0E, 0xEB, 0xBB,
 0xF5, 0x90, 0xF0, 0x0D, 0x2A, 0x3F, 0x57, 0x83, 0x03, 0x98, 0x0C, 0xCF, 0xA2, 0x55, 0xC3, 0x21,
 0xB9, 0x74, 0x30, 0xE3, 0x92, 0x6A, 0xFD, 0xE5, 0x65, 0x33, 0x1B, 0x24, 0x36, 0xAF, 0x25, 0x94,
 0x73, 0xD6, 0x91, 0xD2, 0xC8, 0x2F, 0xBC, 0x59, 0x53, 0x3D, 0x8C, 0xCE, 0x4F, 0x47, 0x3B, 0xF6,
 0xF8, 0x42, 0xE6, 0x14, 0xA8, 0xC1, 0xA6, 0xBF, 0x68, 0x26, 0xD9, 0xB7, 0xA5, 0x81, 0xFF, 0x4C,
 0x71, 0x3A, 0x5F, 0x0F, 0xDB, 0x61, 0x1E, 0xAC, 0x32, 0xB5, 0xF4, 0x4A, 0xD5, 0x15, 0xFC, 0x18,
 0xA4, 0xEA, 0x77, 0x01, 0xA0, 0xC4, 0x8D, 0xB4, 0xC5, 0x7C, 0x9B, 0x93, 0xC6, 0x79, 0x0A, 0xE8,
 0x7D, 0x39, 0xDD, 0xD7, 0x8A, 0xB1, 0xA1, 0x54, 0x63, 0xC9, 0x48, 0x96, 0x82, 0x86, 0x02, 0x0B,
 0x44, 0x49, 0x45, 0x88, 0x19, 0x16, 0xE0, 0x69, 0xB3, 0x1C, 0xB0, 0x84, 0x06, 0xCC, 0x40, 0xB6,
 0x56, 0xC0, 0x7F, 0xCD, 0x2C, 0xED, 0x5D, 0xB2, 0x97, 0x6D, 0x4E, 0x13, 0xFA, 0x7E, 0x64, 0x43,
 0x22, 0x3C, 0x11, 0x5A, 0xBA, 0x8F, 0xEF, 0x67, 0x04, 0xA3, 0xB8, 0xD1, 0x9F, 0xE2, 0x35, 0x23,
 0x6F, 0x5E, 0x5C, 0xFE, 0xD3, 0xC2, 0x1D, 0x05, 0xF9, 0xAB, 0xDC, 0xEC, 0x3E, 0x8E, 0x2E, 0x9C,
 0x51, 0x6C, 0x27, 0x58, 0x78, 0x28, 0x2B, 0x89, 0x41, 0x85, 0x7B, 0xE1, 0x66, 0xEE, 0x72, 0xF2,
 0xA7, 0xF7, 0x6B, 0x09, 0xE4, 0xAE, 0xD4, 0x50, 0xCA, 0x62, 0x8B, 0x17, 0x12, 0x37, 0x4D, 0xA9,
 0xF3, 0x10, 0xDF, 0x9A, 0x52, 0x34, 0x31, 0x9E, 0xAD, 0xC7, 0x76, 0x6E, 0xE9, 0x46, 0xD0, 0x00,
 0xDA, 0xAA, 0x2D, 0x4B, 0x9D, 0x5B, 0x95, 0x70, 0x7A, 0x60, 0x07, 0x87, 0x1F, 0x80, 0xBD, 0x75,
 0x99, 0xDE, 0x29, 0x20, 0xFB, 0xCB, 0xBE, 0xD8, 0x1A, 0x38, 0xF1, 0x08, 0xE7, 0x0E, 0xEB, 0xBB,
 0xF5, 0x90, 0xF0, 0x0D, 0x2A, 0x3F, 0x57, 0x83, 0x03, 0x98, 0x0C, 0xCF, 0xA2, 0x55, 0xC3, 0x21,
 0xB9, 0x74, 0x30, 0xE3, 0x92, 0x6A, 0xFD, 0xE5, 0x65, 0x33, 0x1B, 0x24, 0x36, 0xAF, 0x25, 0x94,
 0x73, 0xD6, 0x91, 0xD2, 0xC8, 0x2F, 0xBC, 0x59, 0x53, 0x3D, 0x8C, 0xCE, 0x4F, 0x47, 0x3B, 0xF6,
 0xF8, 0x42, 0xE6, 0x14, 0xA8, 0xC1, 0xA6, 0xBF, 0x68, 0x26, 0xD9, 0xB7, 0xA5, 0x81, 0xFF, 0x4C,
 0x71, 0x3A, 0x5F, 0x0F, 0xDB, 0x61, 0x1E, 0xAC, 0x32, 0xB5, 0xF4, 0x4A, 0xD5, 0x15, 0xFC, 0x18,
 0xA4, 0xEA, 0x77, 0x01, 0xA0, 0xC4, 0x8D, 0xB4, 0xC5, 0x7C, 0x9B, 0x93, 0xC6, 0x79, 0x0A, 0xE8,
 0x7D, 0x39, 0xDD, 0xD7, 0x8A, 0xB1, 0xA1, 0x54, 0x63, 0xC9, 0x48, 0x96, 0x82, 0x86, 0x02, 0x0B,
 0x44, 0x49, 0x45, 0x88, 0x19, 0x16, 0xE0, 0x69, 0xB3, 0x1C, 0xB0, 0x84, 0x06, 0xCC, 0x40, 0xB6,
 0x56, 0xC0, 0x7F, 0xCD, 0x2C, 0xED, 0x5D, 0xB2, 0x97, 0x6D, 0x4E, 0x13, 0xFA, 0x7E, 0x64, 0x43,
 0x22, 0x3C, 0x11, 0x5A, 0xBA, 0x8F, 0xEF, 0x67, 0x04, 0xA3, 0xB8, 0xD1, 0x9F, 0xE2, 0x35, 0x23,
 0x6F, 0x5E, 0x5C, 0xFE, 0xD3, 0xC2, 0x1D, 0x05, 0xF9, 0xAB, 0xDC, 0xEC, 0x3E, 0x8E, 0x2E, 0x9C,
 0x51, 0x6C, 0x27, 0x58, 0x78, 0x28, 0x2B, 0x89, 0x41, 0x85, 0x7B, 0xE1, 0x66, 0xEE, 0x72, 0xF2,
 0xA7, 0xF7, 0x6B, 0x09, 0xE4, 0xAE, 0xD4, 0x50, 0xCA, 0x62, 0x8B, 0x17, 0x12, 0x37, 0x4D, 0xA9
 };


static const UINT64 rand_m = 0x1000000000000;	// 2^48 - too big to enter directly
static const UINT64 rand_mask = rand_m - 1;		// for quick modulus of 2^48
static const UINT64 rand_a = 0x5deece66d;
static const UINT64 rand_c = 0xb;

/*===========================================================================*/

void xseed48(unsigned long NewSeedLo, unsigned long NewSeedHi)
{
#ifdef NEWSEED

UINT64 hibits, lobits;
unsigned long hi, lo, tmp;

// combine bytes to generate index
tmp = NewSeedHi & 0xffff0000;
hi = NewSeedHi & 0xffff;
hi ^= (tmp >> 16);
hi ^= (hi >> 8) & 0xff;

tmp = NewSeedLo & 0xffff0000;
lo = NewSeedLo & 0xffff;
lo ^= (tmp >> 16);
lo ^= (lo >> 8) & 0xff;

// use index to get a random index into the tables,
// and generate a set of random bits
hibits = hitable[indexer[hi]] ^ NewSeedHi;
lobits = lotable[indexer[lo]] ^ NewSeedLo;

//generate the actual random number, keeping the middle 48 bits
rnum48 = ((hibits * lobits) >> 8) & rand_mask;

#else // NEWSEED

unsigned short SeedAplusE;
unsigned char SeedA, SeedE;
unsigned char SeedB, SeedC, SeedD, SeedF, SeedG, SeedH;

// Decompose SeedVals into individual bytes
SeedA = (unsigned char)((NewSeedLo & 0x000000ff) >> 0);
SeedB = (unsigned char)((NewSeedLo & 0x0000ff00) >> 8);
SeedC = (unsigned char)((NewSeedLo & 0x00ff0000) >> 16);
SeedD = (unsigned char)((NewSeedLo & 0xff000000) >> 24);
SeedE = (unsigned char)((NewSeedHi & 0x000000ff) >> 0);
SeedF = (unsigned char)((NewSeedHi & 0x0000ff00) >> 8);
SeedG = (unsigned char)((NewSeedHi & 0x00ff0000) >> 16);
SeedH = (unsigned char)((NewSeedHi & 0xff000000) >> 24);

// Run S-Boxes on A and E groups to make single-bit
// changes turn into multibit changes.
SeedA = xrSBoxA[SeedA];
SeedE = xrSBoxE[SeedE];

SeedAplusE = SeedA + SeedE;

// Top o' de' hat to Ken Perlin -- by making certain
// tables bigger (repeating their initial contents)
// we can eliminate a modulo-256, here implemented
// as "& 0xff".
//SeedB = xrSBoxB[(SeedA + SeedB + SeedE) & 0xff];
//SeedC = xrSBoxC[(SeedB + SeedC) & 0xff];
//SeedD = xrSBoxD[(SeedC + SeedD) & 0xff];
//SeedF = xrSBoxF[(SeedE + SeedF + SeedA) & 0xff];
//SeedG = xrSBoxG[(SeedF + SeedG) & 0xff];
//SeedH = xrSBoxH[(SeedG + SeedH) & 0xff];

SeedB = xrSBoxB[(SeedAplusE + SeedB)];
SeedC = xrSBoxC[(SeedB + SeedC)];
SeedD = xrSBoxD[(SeedC + SeedD)];

SeedF = xrSBoxF[(SeedAplusE + SeedF)];
SeedG = xrSBoxG[(SeedF + SeedG)];
SeedH = xrSBoxH[(SeedG + SeedH)];

// Transpose bits around between different portions of seeds
// so that bits of the LeastSignificantByte get spread out
// into all six other seed bytes. This ensures that even
// single-bit changes in the LSBs result in bit alterations
// in up to all six bytes used for the actual seed.
SeedB ^= (SeedA & 0x14); // 0001 0100
SeedB ^= (SeedE & 0x40); // 0100 0000

SeedC ^= (SeedA & 0x80); // 1000 0000
SeedC ^= (SeedE & 0x04); // 0000 0100

SeedF ^= (SeedA & 0x08); // 0000 1000
SeedF ^= (SeedE & 0x82); // 1000 0010

SeedG ^= (SeedA & 0x20); // 0010 0000
SeedG ^= (SeedE & 0x01); // 0000 0001

SeedD ^= (SeedA & 0x01); // 0000 0001
SeedD ^= (SeedE & 0x28); // 0010 1000

SeedH ^= (SeedA & 0x42); // 0100 0010
SeedH ^= (SeedE & 0x10); // 0001 0000 

// Results:
                       // B 0e0a 0a00
                       // C a000 0e00
                       // D 00e0 e00a
                       // F e000 a0e0
                       // G 00a0 000e
                       // H 0a0e 00a0

// Drop the data into the seed, kinda randomly
rnum48 = ((SeedD << 8) | SeedH);
rnum48 <<= 16;
rnum48 |= ((SeedC << 8) | SeedG);
rnum48 <<= 16;
rnum48 |= (SeedB << 8) | SeedF;

#endif // NEWSEED

} // xseed48

/*===========================================================================*/

void xseed48backcompat(unsigned long NewSeedLo, unsigned long NewSeedHi)
{
register unsigned char SeedA, SeedE, SeedAplusE;
register unsigned char SeedB, SeedC, SeedD, SeedF, SeedG, SeedH;

// Potentially, this could realize some performance enhancement
// by rewriting it into assembly on each platform, since it is
// such very low-level code. We'll consider it...

// Decompose SeedVals into individual bytes
#ifdef XRAND_PORTABLE_DECOMPOSE
	SeedA = (unsigned char)((NewSeedLo & 0x000000ff) >> 0);
	SeedB = (unsigned char)((NewSeedLo & 0x0000ff00) >> 8);
	SeedC = (unsigned char)((NewSeedLo & 0x00ff0000) >> 16);
	SeedD = (unsigned char)((NewSeedLo & 0xff000000) >> 24);
	SeedE = (unsigned char)((NewSeedHi & 0x000000ff) >> 0);
	SeedF = (unsigned char)((NewSeedHi & 0x0000ff00) >> 8);
	SeedG = (unsigned char)((NewSeedHi & 0x00ff0000) >> 16);
	SeedH = (unsigned char)((NewSeedHi & 0xff000000) >> 24);
#else //! XRAND_PORTABLE_DECOMPOSE
	{
	register unsigned char *Rip;
	#ifdef BYTEORDER_BIGENDIAN
	Rip = (unsigned char *)&NewSeedLo;
	SeedD = *Rip++;
	SeedC = *Rip++;
	SeedB = *Rip++;
	SeedA = *Rip;
	
	Rip = (unsigned char *)&NewSeedHi;
	SeedH = *Rip++;
	SeedG = *Rip++;
	SeedF = *Rip++;
	SeedE = *Rip;

	#else // must be LITTLEENDIAN
	Rip = (unsigned char *)&NewSeedLo;
	SeedA = *Rip++;
	SeedB = *Rip++;
	SeedC = *Rip++;
	SeedD = *Rip;
	
	Rip = (unsigned char *)&NewSeedHi;
	SeedE = *Rip++;
	SeedF = *Rip++;
	SeedG = *Rip++;
	SeedH = *Rip;
	#endif // !BYTEORDER_BIGENDIAN
	}
#endif // !XRAND_PORTABLE_DECOMPOSE


// Run S-Boxes on A and E groups to make single-bit
// changes turn into multibit changes.
SeedA = xrSBoxA[SeedA];
SeedE = xrSBoxE[SeedE];

SeedAplusE = (SeedA + SeedE) & 0xff;

// Top o' de' hat to Ken Perlin -- by making certain
// tables bigger (repeating their initial contents)
// we can eliminate a modulo-256, here implemented
// as "& 0xff".
//SeedB = xrSBoxB[(SeedA + SeedB + SeedE) & 0xff];
//SeedC = xrSBoxC[(SeedB + SeedC) & 0xff];
//SeedD = xrSBoxD[(SeedC + SeedD) & 0xff];
//SeedF = xrSBoxF[(SeedE + SeedF + SeedA) & 0xff];
//SeedG = xrSBoxG[(SeedF + SeedG) & 0xff];
//SeedH = xrSBoxH[(SeedG + SeedH) & 0xff];

SeedB = xrSBoxB[(SeedAplusE + SeedB)];
SeedC = xrSBoxC[(SeedB + SeedC)];
SeedD = xrSBoxD[(SeedC + SeedD)];

SeedF = xrSBoxF[(SeedAplusE + SeedF)];
SeedG = xrSBoxG[(SeedF + SeedG)];
SeedH = xrSBoxH[(SeedG + SeedH)];


// Transpose bits around between different portions of seeds
// so that bits of the LeastSignificantByte get spread out
// into all six other seed bytes. This ensures that even
// single-bit changes in the LSBs result in bit alterations
// in up to all six bytes used for the actual seed.
SeedB ^= (SeedA & 0x14); // 0001 0100
SeedB ^= (SeedE & 0x40); // 0100 0000

SeedC ^= (SeedA & 0x80); // 1000 0000
SeedC ^= (SeedE & 0x04); // 0000 0100

SeedF ^= (SeedA & 0x08); // 0000 1000
SeedF ^= (SeedE & 0x82); // 1000 0010

SeedG ^= (SeedA & 0x20); // 0010 0000
SeedG ^= (SeedE & 0x01); // 0000 0001

SeedD ^= (SeedA & 0x01); // 0000 0001
SeedD ^= (SeedE & 0x28); // 0010 1000

SeedH ^= (SeedA & 0x42); // 0100 0010
SeedH ^= (SeedE & 0x10); // 0001 0000 

// Results:
                       // B 0e0a 0a00
                       // C a000 0e00
                       // D 00e0 e00a
                       // F e000 a0e0
                       // G 00a0 000e
                       // H 0a0e 00a0


// Drop the data into the seeding structure, kinda randomly
#ifdef XRAND_PORTABLE_COMPOSE
{
register unsigned short int SeedWord;
SeedWord = SeedB; Seed[2] = ((SeedWord << 8) | SeedF);
SeedWord = SeedC; Seed[1] = ((SeedWord << 8) | SeedG);
SeedWord = SeedD; Seed[0] = ((SeedWord << 8) | SeedH);
}
#else //! XRAND_PORTABLE_COMPOSE
{
register unsigned char *Slap;
	#ifdef BYTEORDER_BIGENDIAN
	// Assume no structure padding
	Slap = (unsigned char *)&Seed[0];
	*Slap++ = SeedD;
	*Slap++ = SeedH;

	//Slap = (unsigned char *)&Seed[1];
	*Slap++ = SeedC;
	*Slap++ = SeedG;

	//Slap = (unsigned char *)&Seed[2];
	*Slap++ = SeedB;
	*Slap = SeedF;

	#else // must be LITTLEENDIAN
	Slap = (unsigned char *)&Seed[0];
	*Slap++ = SeedH;
	*Slap++ = SeedD;

	//Slap = (unsigned char *)&Seed[1];
	*Slap++ = SeedG;
	*Slap++ = SeedC;

	//Slap = (unsigned char *)&Seed[2];
	*Slap++ = SeedF;
	*Slap = SeedB;

	#endif // !BYTEORDER_BIGENDIAN
}
#endif //! XRAND_PORTABLE_COMPOSE


} // xseed48backcompat

/*===========================================================================*/

double xrand48(void)
{

rnum48 *= rand_a;
rnum48 += rand_c;
rnum48 &= rand_mask;

return ((double)rnum48 / (double)rand_m);

} // xrand48()

/*===========================================================================*/

unsigned long int xrand48int(void)
{

rnum48 *= rand_a;
rnum48 += rand_c;
rnum48 &= rand_mask;

// return highest 32 bits (lowest bits aren't as random)
return ((unsigned long)((rnum48 >> 16) & 0xffffffff));

} // xrand48int()

/*===========================================================================*/

unsigned long int xrand48intbackcompat(void)
{
unsigned long m2, m1, m0, carry;
unsigned long Final;
unsigned short nx0, nx1;
unsigned short a2 = 0xe66d, a1 = 0xdeec, a0 = 0x05, c = 0xb;

// 1
m0 = Seed[2] * a2 + c;
// carry = (m0 / 0xffff) & 0x0000ffff;
carry = (m0 / 0xffff);	// mask is unneeded for these constants
m0 &= 0x0000ffff;

m1 = Seed[2] * a1 + carry;
carry = (m1 / 0xffff) & 0x0000ffff;
m1 &= 0x0000ffff;

m2 = Seed[2] * a0 + carry;
// Hmmm, this constant mask has too many f's, methinks...
m2 &= 0x000fffff;
//m2 &= 0x000ffff;

// 2
m1 += Seed[1] * a2;
carry = (m1 / 0x0000ffff) & 0x0000ffff;
m1 &= 0x0000ffff;

m2 += Seed[1] * a1 + carry;
m2 &= 0x0000ffff;

// 3
m2 += Seed[0] * a2;
m2 &= 0x0000ffff;

nx0 = (unsigned short)(m1 ^   m2);
nx1 = (unsigned short)(m0 ^ (~m2));

Final = (m1 ^ m2) << 16;
Final += (unsigned short)(m0 ^ (~m2));

// Reseed
Seed[0] = m2;
Seed[1] = m1;
Seed[2] = m0;

Final = (nx0 << 16) + nx1; // Combine into 32 bit

return(Final);
} // xrand48intbackcompat()

/*===========================================================================*/

#ifndef BUILD_LIB
// This is all C++ code that we don't want in our basic C-style library

/*===========================================================================*/
/*===========================================================================*/
// PRNGX

void PRNGX::Seed64(unsigned long NewSeedLo, unsigned long NewSeedHi)
{
#ifdef NEWSEED

UINT64 hibits, lobits;
unsigned long hi, lo, tmp;

// combine bytes to generate index
tmp = NewSeedHi & 0xffff0000;
hi = NewSeedHi & 0xffff;
hi ^= (tmp >> 16);
hi ^= (hi >> 8) & 0xff;

tmp = NewSeedLo & 0xffff0000;
lo = NewSeedLo & 0xffff;
lo ^= (tmp >> 16);
lo ^= (lo >> 8) & 0xff;

// use index to get a random index into the tables,
// and generate a set of random bits
hibits = hitable[indexer[hi]] ^ NewSeedHi;
lobits = lotable[indexer[lo]] ^ NewSeedLo;

//generate the actual random number, keeping the middle 48 bits
rnum = ((hibits * lobits) >> 8) & rand_mask;

#else // NEWSEED

unsigned short SeedAplusE;
unsigned char SeedA, SeedE;
unsigned char SeedB, SeedC, SeedD, SeedF, SeedG, SeedH;

// Decompose SeedVals into individual bytes
SeedA = (unsigned char)((NewSeedLo & 0x000000ff) >> 0);
SeedB = (unsigned char)((NewSeedLo & 0x0000ff00) >> 8);
SeedC = (unsigned char)((NewSeedLo & 0x00ff0000) >> 16);
SeedD = (unsigned char)((NewSeedLo & 0xff000000) >> 24);
SeedE = (unsigned char)((NewSeedHi & 0x000000ff) >> 0);
SeedF = (unsigned char)((NewSeedHi & 0x0000ff00) >> 8);
SeedG = (unsigned char)((NewSeedHi & 0x00ff0000) >> 16);
SeedH = (unsigned char)((NewSeedHi & 0xff000000) >> 24);

// Run S-Boxes on A and E groups to make single-bit
// changes turn into multibit changes.
SeedA = xrSBoxA[SeedA];
SeedE = xrSBoxE[SeedE];

SeedAplusE = SeedA + SeedE;

// Top o' de' hat to Ken Perlin -- by making certain
// tables bigger (repeating their initial contents)
// we can eliminate a modulo-256, here implemented
// as "& 0xff".
//SeedB = xrSBoxB[(SeedA + SeedB + SeedE) & 0xff];
//SeedC = xrSBoxC[(SeedB + SeedC) & 0xff];
//SeedD = xrSBoxD[(SeedC + SeedD) & 0xff];
//SeedF = xrSBoxF[(SeedE + SeedF + SeedA) & 0xff];
//SeedG = xrSBoxG[(SeedF + SeedG) & 0xff];
//SeedH = xrSBoxH[(SeedG + SeedH) & 0xff];

SeedB = xrSBoxB[(SeedAplusE + SeedB)];
SeedC = xrSBoxC[(SeedB + SeedC)];
SeedD = xrSBoxD[(SeedC + SeedD)];

SeedF = xrSBoxF[(SeedAplusE + SeedF)];
SeedG = xrSBoxG[(SeedF + SeedG)];
SeedH = xrSBoxH[(SeedG + SeedH)];

// Transpose bits around between different portions of seeds
// so that bits of the LeastSignificantByte get spread out
// into all six other seed bytes. This ensures that even
// single-bit changes in the LSBs result in bit alterations
// in up to all six bytes used for the actual seed.
SeedB ^= (SeedA & 0x14); // 0001 0100
SeedB ^= (SeedE & 0x40); // 0100 0000

SeedC ^= (SeedA & 0x80); // 1000 0000
SeedC ^= (SeedE & 0x04); // 0000 0100

SeedF ^= (SeedA & 0x08); // 0000 1000
SeedF ^= (SeedE & 0x82); // 1000 0010

SeedG ^= (SeedA & 0x20); // 0010 0000
SeedG ^= (SeedE & 0x01); // 0000 0001

SeedD ^= (SeedA & 0x01); // 0000 0001
SeedD ^= (SeedE & 0x28); // 0010 1000

SeedH ^= (SeedA & 0x42); // 0100 0010
SeedH ^= (SeedE & 0x10); // 0001 0000 

// Results:
                       // B 0e0a 0a00
                       // C a000 0e00
                       // D 00e0 e00a
                       // F e000 a0e0
                       // G 00a0 000e
                       // H 0a0e 00a0

// Drop the data into the seed, kinda randomly
rnum = ((SeedD << 8) | SeedH);
rnum <<= 16;
rnum |= ((SeedC << 8) | SeedG);
rnum <<= 16;
rnum |= (SeedB << 8) | SeedF;

#endif // NEWSEED

} // PRNGX::Seed64

/*===========================================================================*/

double PRNGX::GenPRN(void)
{

rnum *= rand_a;
rnum += rand_c;
rnum &= rand_mask;

return ((double)rnum / (double)rand_m);

} // PRNGX::GenPRN

/*===========================================================================*/

double PRNGX::Seed64GenPRN(unsigned long NewSeedLo, unsigned long NewSeedHi)
{
#ifdef NEWSEED

UINT64 hibits, lobits;
unsigned long hi, lo, tmp;

// combine bytes to generate index
tmp = NewSeedHi & 0xffff0000;
hi = NewSeedHi & 0xffff;
hi ^= (tmp >> 16);
hi ^= (hi >> 8) & 0xff;

tmp = NewSeedLo & 0xffff0000;
lo = NewSeedLo & 0xffff;
lo ^= (tmp >> 16);
lo ^= (lo >> 8) & 0xff;

// use index to get a random index into the tables,
// and generate a set of random bits
hibits = hitable[indexer[hi]] ^ NewSeedHi;
lobits = lotable[indexer[lo]] ^ NewSeedLo;

//generate the actual random number, keeping the middle 48 bits
rnum = ((hibits * lobits) >> 8) & rand_mask;

#else // NEWSEED

unsigned short SeedAplusE;
unsigned char SeedA, SeedE;
unsigned char SeedB, SeedC, SeedD, SeedF, SeedG, SeedH;

// Decompose SeedVals into individual bytes
SeedA = (unsigned char)((NewSeedLo & 0x000000ff) >> 0);
SeedB = (unsigned char)((NewSeedLo & 0x0000ff00) >> 8);
SeedC = (unsigned char)((NewSeedLo & 0x00ff0000) >> 16);
SeedD = (unsigned char)((NewSeedLo & 0xff000000) >> 24);
SeedE = (unsigned char)((NewSeedHi & 0x000000ff) >> 0);
SeedF = (unsigned char)((NewSeedHi & 0x0000ff00) >> 8);
SeedG = (unsigned char)((NewSeedHi & 0x00ff0000) >> 16);
SeedH = (unsigned char)((NewSeedHi & 0xff000000) >> 24);

// Run S-Boxes on A and E groups to make single-bit
// changes turn into multibit changes.
SeedA = xrSBoxA[SeedA];
SeedE = xrSBoxE[SeedE];

SeedAplusE = SeedA + SeedE;

// Top o' de' hat to Ken Perlin -- by making certain
// tables bigger (repeating their initial contents)
// we can eliminate a modulo-256, here implemented
// as "& 0xff".
//SeedB = xrSBoxB[(SeedA + SeedB + SeedE) & 0xff];
//SeedC = xrSBoxC[(SeedB + SeedC) & 0xff];
//SeedD = xrSBoxD[(SeedC + SeedD) & 0xff];
//SeedF = xrSBoxF[(SeedE + SeedF + SeedA) & 0xff];
//SeedG = xrSBoxG[(SeedF + SeedG) & 0xff];
//SeedH = xrSBoxH[(SeedG + SeedH) & 0xff];

SeedB = xrSBoxB[(SeedAplusE + SeedB)];
SeedC = xrSBoxC[(SeedB + SeedC)];
SeedD = xrSBoxD[(SeedC + SeedD)];

SeedF = xrSBoxF[(SeedAplusE + SeedF)];
SeedG = xrSBoxG[(SeedF + SeedG)];
SeedH = xrSBoxH[(SeedG + SeedH)];

// Transpose bits around between different portions of seeds
// so that bits of the LeastSignificantByte get spread out
// into all six other seed bytes. This ensures that even
// single-bit changes in the LSBs result in bit alterations
// in up to all six bytes used for the actual seed.
SeedB ^= (SeedA & 0x14); // 0001 0100
SeedB ^= (SeedE & 0x40); // 0100 0000

SeedC ^= (SeedA & 0x80); // 1000 0000
SeedC ^= (SeedE & 0x04); // 0000 0100

SeedF ^= (SeedA & 0x08); // 0000 1000
SeedF ^= (SeedE & 0x82); // 1000 0010

SeedG ^= (SeedA & 0x20); // 0010 0000
SeedG ^= (SeedE & 0x01); // 0000 0001

SeedD ^= (SeedA & 0x01); // 0000 0001
SeedD ^= (SeedE & 0x28); // 0010 1000

SeedH ^= (SeedA & 0x42); // 0100 0010
SeedH ^= (SeedE & 0x10); // 0001 0000 

// Results:
                       // B 0e0a 0a00
                       // C a000 0e00
                       // D 00e0 e00a
                       // F e000 a0e0
                       // G 00a0 000e
                       // H 0a0e 00a0

// Drop the data into the seed, kinda randomly
rnum = ((SeedD << 8) | SeedH);
rnum <<= 16;
rnum |= ((SeedC << 8) | SeedG);
rnum <<= 16;
rnum |= (SeedB << 8) | SeedF;

rnum *= rand_a;
rnum += rand_c;
rnum &= rand_mask;

#endif // NEWSEED

return ((double)rnum / (double)rand_m);

} // PRNGX::Seed64GenPRN

/*===========================================================================*/

void PRNGX::GenMultiPRN(unsigned int NumDesired, double *OutputBin)
{

for (unsigned long GenLoop = 0; GenLoop < NumDesired; ++GenLoop)
	{
	rnum *= rand_a;
	rnum += rand_c;
	rnum &= rand_mask;
	OutputBin[GenLoop] = ((double)rnum / (double)rand_m);
	} // for

} // PRNGX::GenMultiPRN

/*===========================================================================*/

double PRNGX::GenGauss(void)
{
double sum = 0.0;

for (unsigned long GenLoop = 0; GenLoop < 4; GenLoop++)
	{
	rnum *= rand_a;
	rnum += rand_c;
	rnum &= rand_mask;
	sum += ((double)rnum / (double)rand_m);
	} // for GenLoop

return (1.73205 * sum - 3.46410);

} // PRNGX::GenGauss

#endif // !BUILD_LIB

/*===========================================================================*/
/*===========================================================================*/
// Gaussian

double GaussRand(void)
{
double sum;

sum = xrand48() + xrand48() + xrand48() + xrand48();

return (1.73205 * sum - 3.46410);

} // GaussRand

/*===========================================================================*/

#ifdef BUILD_LIB
//} // extern "C"
#endif // BUILD_LIB
