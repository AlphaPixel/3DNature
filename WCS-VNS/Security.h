// Security.h
//
// Hardware key security routines
// Built from scratch on 9/22/97 by Chris 'Xenon' Hanson
// Copyright 1997

#include "stdafx.h"

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

#ifndef WCS_SECURITY_H
#define WCS_SECURITY_H

#define WCS_SECURITY_FORWARD_VERSIONS 3

// we must check in this often (in seconds) with the server, when using networked hardware keys
#define WCS_SECURITY_NETWORK_DONGLE_HEARTBEAT 28800 // now 8 hourss

#ifdef WCS_BUILD_DEMO
#include <time.h>
#define DISABLE_DONGLE
#endif // WCS_BUILD_DEMO

#include "Application.h"
#include "Log.h"
#include "FeatureConfig.h"
//extern WCSApp *GlobalApp;

#include "spromeps.h" // Dongle driver for Rainbow SuperPro for Windows
#define DONGLE_DEV_ID 0xf718
#define WCS_SECURITY_AUTH_FIELD_A	0x12
#define WCS_SECURITY_AUTH_FIELD_B	0x18
#define WCS_SECURITY_AUTH_FIELD_RTX 0x19
#define WCS_SECURITY_RTX_OPT_FIELD  0x1A
#define WCS_SECURITY_AUTH_FIELD_NETKEY  0x20
// Need to link with spromeps.lib!

// enums for RTX formats
#ifdef WCS_BUILD_RTX

enum RTX_FORMATS
	{
	WCS_SECURITY_RTX_FORMAT_NVE = 0,
	WCS_SECURITY_RTX_FORMAT_VRML_WEB,
	WCS_SECURITY_RTX_FORMAT_3DS,
	WCS_SECURITY_RTX_FORMAT_LW,
	WCS_SECURITY_RTX_FORMAT_VTP,
	WCS_SECURITY_RTX_FORMAT_STL,
	WCS_SECURITY_RTX_FORMAT_VRMLSTL,
	WCS_SECURITY_RTX_FORMAT_OPENFLIGHT,
	WCS_SECURITY_RTX_FORMAT_TERRAPAGE,
	WCS_SECURITY_RTX_FORMAT_MAYA,
	WCS_SECURITY_RTX_FORMAT_SOFTIMAGE,
	WCS_SECURITY_RTX_FORMAT_OPTA,
	WCS_SECURITY_RTX_FORMAT_OPTB,
	WCS_SECURITY_RTX_FORMAT_GIS,
	WCS_SECURITY_RTX_FORMAT_WCSVNS,
	WCS_SECURITY_RTX_FORMAT_COLLADA,
	WCS_SECURITY_RTX_FORMAT_FBX,
	WCS_SECURITY_RTX_FORMAT_KML,
	WCS_SECURITY_RTX_FORMAT_WW,
	WCS_SECURITY_RTX_FORMAT_MAXIMUM // not to be comfused with 3DSMax format
	};

enum
	{ // these are the optional ones, the non-optionals don't have flagbits assigned (we only have 16 to assign)
	WCS_SECURITY_RTX_FLAG_VRMLSTL = 1, // includes plain STL
	WCS_SECURITY_RTX_FLAG_OPENFLIGHT = 2,
	WCS_SECURITY_RTX_FLAG_TERRAPAGE = 4,
	WCS_SECURITY_RTX_FLAG_MAYA = 8,
	WCS_SECURITY_RTX_FLAG_SOFTIMAGE = 16,
	WCS_SECURITY_RTX_FLAG_OPTA = 32,
	WCS_SECURITY_RTX_FLAG_OPTB = 64,
	WCS_SECURITY_RTX_FLAG_MAXIMUM // not to be confused with 3DSMax format
	};


#endif // WCS_BUILD_RTX


#ifdef _WIN32
// Here's the table of some of the codes for the Win32 Sentinal dongle
// Not used this way any more.
//extern unsigned long SentWinChalResp[];
#endif // _WIN32

class Security
	{
	private:
		RBP_SPRO_APIPACKET SPRO;
		WORD SerA, SerB;
		DWORD DResp;
		unsigned long FullSerial;
		unsigned char SPResp[10], SPQuery[10], CodedString[200];
		unsigned char DonglePresentCached, RenderEngineCached;
		unsigned char DongleFoundInitially;
		unsigned char AttemptNLM;
		char PreferredNLMHost[200];
		#ifdef WCS_BUILD_DEMO
		time_t DTime;
		#endif // WCS_BUILD_DEMO

		#ifndef WCS_BUILD_DEMO
		int InitDongle(void);
		#endif // !WCS_BUILD_DEMO

	public:
		Security();
		~Security();

		#ifndef WCS_BUILD_DEMO
		 // only indicates a key is present, not that it's authorized in any way
		unsigned long CheckDonglePresentQuick(void) {return(DonglePresentCached);};
		void SetDonglePresentCached(unsigned char DonglePresent) {DonglePresentCached = DonglePresent;};

		void SetAttemptNLM(unsigned char NewAttemptNLM) {AttemptNLM = NewAttemptNLM;};
		unsigned char GetAttemptNLM(void) {return(AttemptNLM);};
		void SetPreferredNLMHost(char *NewPreferredNLMHost) {strcpy(PreferredNLMHost, NewPreferredNLMHost);};
		char *GetPreferredNLMHost(void) {return(PreferredNLMHost);};

		// used in network-floating dongle configurations to tell the server we're still alive
		// during long rendering operations
		#ifdef WCS_SECURITY_NETWORK_DONGLE
		void PingDongleServer(void);
		#endif // WCS_SECURITY_NETWORK_DONGLE

		unsigned long FindDongle(void); // wrapper replacement for RNBOsproFindFirstUnit, which we should now only call once per run

		 // indicates no key is present, or that we've been asked to be a Render Engine even if one was there...
		unsigned long CheckRenderEngineQuick(void) {return(RenderEngineCached);};
		void SetRenderEngineCached(unsigned char RenderEngine) {RenderEngineCached = RenderEngine;};
		unsigned long CheckDongle(unsigned long Code = NULL);
		unsigned long CheckSerial(void);
		unsigned long CheckKeySerial(void);
		unsigned long ErrorCheckNewAuthorizationValue(unsigned long NewAuthValue); // returns true if new value will pass this build's authorization somehow
		unsigned long CheckAuthField(unsigned char RequiredEditionCode, unsigned char *PermittedEditionCodes, int FieldLoc = WCS_SECURITY_AUTH_FIELD_A);
		unsigned long ValidateAuthFieldValue(unsigned char RequiredEditionCode, unsigned char *PermittedEditionCodes, unsigned long AuthField);
		unsigned long CheckAuthFieldVersion(unsigned char RequiredEditionCode, unsigned char *PermittedEditionCodes, int FieldLoc, unsigned long AppVerNum);
		unsigned long ValidateAuthFieldVersionValue(unsigned char RequiredEditionCode, unsigned char *PermittedEditionCodes, unsigned long AuthField, unsigned long AppVerNum);
		unsigned long ReadAuthField(int FieldLoc = WCS_SECURITY_AUTH_FIELD_A);
		unsigned long WriteAuthField(WORD NewAuth, int FieldLoc = WCS_SECURITY_AUTH_FIELD_A);
		unsigned long DecodeAuthString(char *AString);

		unsigned long CalcWCSVerNum(unsigned long AppVerNum) {return(AppVerNum);};
		unsigned long CalcVNSVerNum(unsigned long AppVerNum) {return(AppVerNum + 127);};  // make it impossible to practically recycle codes from WCS to VNS
		
		unsigned long DoAuth(unsigned char EditionCode, int FieldLoc = WCS_SECURITY_AUTH_FIELD_A);

#ifdef WCS_BUILD_RTX
		unsigned long HandleArmoredAuth(char *InputString);
#endif // WCS_BUILD_RTX

		int CheckHL(void);
		char *EncodeAuthString(unsigned long ACode);
		#else // WCS_BUILD_DEMO
		 // indicates no key is present, or that we've been asked to be a Render Engine even if one was there...
		 // DEMO version always returns 0
		unsigned long CheckRenderEngineQuick(void) {return(0);};
		#endif // WCS_BUILD_DEMO

// This is available in Demo versions of VNS
#ifdef WCS_FORESTRY_WIZARD
		unsigned long CheckAuthFieldForestry(void);
#endif // WCS_FORESTRY_WIZARD

// This is also sort of available in Demo versions of VNS
#ifdef WCS_BUILD_RTX
		unsigned long CheckAuthFieldRTX(unsigned long Version = 1);
		unsigned long CheckFormatRTX(unsigned long FormatEnum); // not the flag, the format
		unsigned long CheckImageFormatRTX(const char *FormatName);
#endif // WCS_BUILD_RTX

		unsigned long CheckAuthFieldSX2(void);

		unsigned long CheckAuthSE(void);

		#ifdef WCS_BUILD_DEMO
		void TimeCheck(void);
		#endif // WCS_BUILD_DEMO

	}; // class Security

#ifndef WCS_BUILD_DEMO
char *XFT_trJz(void);
#endif // !WCS_BUILD_DEMO

// Don't look. It hurts.
// a = code index, b = minute
#ifdef WCS_BUILD_DEMO
#define SECURITY_INLINE_CHECK(a, b) {GlobalApp->Sentinal->TimeCheck();}
#else // !WCS_BUILD_DEMO
#ifdef DISABLE_DONGLE
// dongle fully disabled
#define SECURITY_INLINE_CHECK(a, b) {}
#else // !DISABLE_DONGLE

#define SECURITY_INLINE_CHECK(a, b) {SYSTEMTIME SecSysT;static char OneShot;GetSystemTime(&SecSysT);if(SecSysT.wMinute == (b)){if(OneShot == 0){OneShot = 1;if(GlobalApp->Sentinal->CheckDongle(WCS_SECURITY_CHALLENGE_ ##a) != (WCS_SECURITY_RESPONSE__ ##a)){/*GlobalApp->StatusLog->PostError(255, XFT_trJz());*/GlobalApp->SetTerminate(2);}}}else{OneShot = 0;}}
/* 
// Expanded for readability below:

#define SECURITY_INLINE_CHECK(a, b)
{
SYSTEMTIME SecSysT;
static char OneShot;
GetSystemTime(&SecSysT);
if(SecSysT.wMinute == (b))
	{
	if(OneShot == 0)
		{
		OneShot = 1;
		if(GlobalApp->Sentinal->CheckDongle(WCS_SECURITY_CHALLENGE_ ##a) != (WCS_SECURITY_RESPONSE__ ##a))
			{
			//GlobalApp->StatusLog->PostError(255, XFT_trJz());
			GlobalApp->SetTerminate(2);
			}
		}
	}
else
	{
	OneShot = 0;
	}
}


// And now the Network authorized version:

#define SECURITY_INLINE_CHECK(a, b)
{
SYSTEMTIME SecSysT;
static char OneShot;
GetSystemTime(&SecSysT);
if(SecSysT.wMinute == (b))
	{
	if(OneShot == 0)
		{
		OneShot = 1;
		if(!IsNetworkAuthorized() && GlobalApp->Sentinal->CheckDongle(WCS_SECURITY_CHALLENGE_ ##a) != (WCS_SECURITY_RESPONSE__ ##a))
			{
			//GlobalApp->StatusLog->PostError(255, XFT_trJz());
			GlobalApp->SetTerminate(2);
			}
		}
	}
else
	{
	OneShot = 0;
	}
}


*/


#endif // !DISABLE_DONGLE
#endif // !WCS_BUILD_DEMO


#ifdef WCS_BUILD_DEMO
#define DONGLE_INLINE_CHECK() {GlobalApp->Sentinal->TimeCheck();}
#else // !WCS_BUILD_DEMO
#ifdef DISABLE_DONGLE
// fully disabled
#define DONGLE_INLINE_CHECK() {}
#else // !DISABLE_DONGLE
#define DONGLE_INLINE_CHECK() {if (! GlobalApp->Sentinal->CheckDongle())  return;}

#endif // !DISABLE_DONGLE
#endif // !WCS_BUILD_DEMO


// Here's a table of some of the codes for the Win32 Sentinal dongle
// We do these as #defines so they don't all live in one place in the
// code and rather get inserted into the local call sequence
#define WCS_SECURITY_CHALLENGE_001 0x17DA3D95
#define WCS_SECURITY_RESPONSE__001 0x175016E8
#define WCS_SECURITY_CHALLENGE_002 0xF04C1DD0
#define WCS_SECURITY_RESPONSE__002 0x40284838
#define WCS_SECURITY_CHALLENGE_003 0xD84DD55B
#define WCS_SECURITY_RESPONSE__003 0x2B836879
#define WCS_SECURITY_CHALLENGE_004 0x7B294C0C
#define WCS_SECURITY_RESPONSE__004 0x05B8269A
#define WCS_SECURITY_CHALLENGE_005 0x251F954C
#define WCS_SECURITY_RESPONSE__005 0xC8E12E4A
#define WCS_SECURITY_CHALLENGE_006 0xC678FB2F
#define WCS_SECURITY_RESPONSE__006 0x6CA81E41
#define WCS_SECURITY_CHALLENGE_007 0xFE823800
#define WCS_SECURITY_RESPONSE__007 0x30B4DD80
#define WCS_SECURITY_CHALLENGE_008 0xF8184DC8
#define WCS_SECURITY_RESPONSE__008 0xB8A86289
#define WCS_SECURITY_CHALLENGE_009 0x54BD2FE1
#define WCS_SECURITY_RESPONSE__009 0xE7690508
#define WCS_SECURITY_CHALLENGE_010 0x3AEC44A8
#define WCS_SECURITY_RESPONSE__010 0x4ADF37E8
#define WCS_SECURITY_CHALLENGE_011 0x2D20D296
#define WCS_SECURITY_RESPONSE__011 0x97B33EC6
#define WCS_SECURITY_CHALLENGE_012 0x6C8B9442
#define WCS_SECURITY_RESPONSE__012 0xEDB36730
#define WCS_SECURITY_CHALLENGE_013 0x0783754A
#define WCS_SECURITY_RESPONSE__013 0xAF0132B8
#define WCS_SECURITY_CHALLENGE_014 0x9E2BE5DB
#define WCS_SECURITY_RESPONSE__014 0xB2C9A399
#define WCS_SECURITY_CHALLENGE_015 0x5355353C
#define WCS_SECURITY_RESPONSE__015 0xA9780F09
#define WCS_SECURITY_CHALLENGE_016 0xEA7A95FE
#define WCS_SECURITY_RESPONSE__016 0xE1D3E809
#define WCS_SECURITY_CHALLENGE_017 0x15C7CD01
#define WCS_SECURITY_RESPONSE__017 0x27ED6E6C
#define WCS_SECURITY_CHALLENGE_018 0x7458C53A
#define WCS_SECURITY_RESPONSE__018 0x9B153CF0
#define WCS_SECURITY_CHALLENGE_019 0xED2B70B5
#define WCS_SECURITY_RESPONSE__019 0xA660A5C9
#define WCS_SECURITY_CHALLENGE_020 0xA6F717D3
#define WCS_SECURITY_RESPONSE__020 0xB645D0A8
#define WCS_SECURITY_CHALLENGE_021 0xC78E146A
#define WCS_SECURITY_RESPONSE__021 0x8A6916C9
#define WCS_SECURITY_CHALLENGE_022 0xD896686D
#define WCS_SECURITY_RESPONSE__022 0xF308F9E9
#define WCS_SECURITY_CHALLENGE_023 0xA0F0B71E
#define WCS_SECURITY_RESPONSE__023 0x069D96C8
#define WCS_SECURITY_CHALLENGE_024 0x0B36B907
#define WCS_SECURITY_RESPONSE__024 0xDAE06B49
#define WCS_SECURITY_CHALLENGE_025 0xECC3760F
#define WCS_SECURITY_RESPONSE__025 0x28093429
#define WCS_SECURITY_CHALLENGE_026 0x5785692A
#define WCS_SECURITY_RESPONSE__026 0x0221F0C4
#define WCS_SECURITY_CHALLENGE_027 0x42FE6DF0
#define WCS_SECURITY_RESPONSE__027 0x158917B9
#define WCS_SECURITY_CHALLENGE_028 0x985A5F0A
#define WCS_SECURITY_RESPONSE__028 0x6111606A
#define WCS_SECURITY_CHALLENGE_029 0x1C6111A5
#define WCS_SECURITY_RESPONSE__029 0xC5F9A0C8
#define WCS_SECURITY_CHALLENGE_030 0xCAF8B0A3
#define WCS_SECURITY_RESPONSE__030 0x76A93789
#define WCS_SECURITY_CHALLENGE_031 0x61FB553D
#define WCS_SECURITY_RESPONSE__031 0x066122F9
#define WCS_SECURITY_CHALLENGE_032 0x45A13B99
#define WCS_SECURITY_RESPONSE__032 0x8738824B
#define WCS_SECURITY_CHALLENGE_033 0xB6374C1F
#define WCS_SECURITY_RESPONSE__033 0x28C96B49
#define WCS_SECURITY_CHALLENGE_034 0x86763178
#define WCS_SECURITY_RESPONSE__034 0xFC832B9B
#define WCS_SECURITY_CHALLENGE_035 0x03090C10
#define WCS_SECURITY_RESPONSE__035 0x33EB3622
#define WCS_SECURITY_CHALLENGE_036 0xD2C5E09B
#define WCS_SECURITY_RESPONSE__036 0x16222E81
#define WCS_SECURITY_CHALLENGE_037 0xDC6CAEC4
#define WCS_SECURITY_RESPONSE__037 0x9BA1AA48
#define WCS_SECURITY_CHALLENGE_038 0x05653235
#define WCS_SECURITY_RESPONSE__038 0x498C2609
#define WCS_SECURITY_CHALLENGE_039 0xB5CF5279
#define WCS_SECURITY_RESPONSE__039 0x2D306E49
#define WCS_SECURITY_CHALLENGE_040 0x370483CE
#define WCS_SECURITY_RESPONSE__040 0xAB0B3A2B
#define WCS_SECURITY_CHALLENGE_041 0x8F32F52D
#define WCS_SECURITY_RESPONSE__041 0x21083BCC
#define WCS_SECURITY_CHALLENGE_042 0x69A3D468
#define WCS_SECURITY_RESPONSE__042 0xA7E0BD08
#define WCS_SECURITY_CHALLENGE_043 0x699598E1
#define WCS_SECURITY_RESPONSE__043 0x39563FE1
#define WCS_SECURITY_CHALLENGE_044 0x9B432602
#define WCS_SECURITY_RESPONSE__044 0xAF2B77CC
#define WCS_SECURITY_CHALLENGE_045 0x3140AB00
#define WCS_SECURITY_RESPONSE__045 0x87297BE9
#define WCS_SECURITY_CHALLENGE_046 0xF5C77A6B
#define WCS_SECURITY_RESPONSE__046 0x03C8B338
#define WCS_SECURITY_CHALLENGE_047 0x0BA24FB4
#define WCS_SECURITY_RESPONSE__047 0x35447668
#define WCS_SECURITY_CHALLENGE_048 0x2866CB05
#define WCS_SECURITY_RESPONSE__048 0xBCC88B65
#define WCS_SECURITY_CHALLENGE_049 0xE306F168
#define WCS_SECURITY_RESPONSE__049 0x40FB6C3B
#define WCS_SECURITY_CHALLENGE_050 0x5A061D9E
#define WCS_SECURITY_RESPONSE__050 0x31EF8E51
#define WCS_SECURITY_CHALLENGE_051 0x29C5ABCA
#define WCS_SECURITY_RESPONSE__051 0x65FB2E69
#define WCS_SECURITY_CHALLENGE_052 0x9C1792D2
#define WCS_SECURITY_RESPONSE__052 0x3658E007
#define WCS_SECURITY_CHALLENGE_053 0x01E9FD74
#define WCS_SECURITY_RESPONSE__053 0xAB75ED5A
#define WCS_SECURITY_CHALLENGE_054 0x43C412DF
#define WCS_SECURITY_RESPONSE__054 0x382960FA
#define WCS_SECURITY_CHALLENGE_055 0xBA9EE6F5
#define WCS_SECURITY_RESPONSE__055 0x262533B9
#define WCS_SECURITY_CHALLENGE_056 0x7658D526
#define WCS_SECURITY_RESPONSE__056 0x07BFA57B
#define WCS_SECURITY_CHALLENGE_057 0xD3014822
#define WCS_SECURITY_RESPONSE__057 0x7EC9AF39
#define WCS_SECURITY_CHALLENGE_058 0x8A21B751
#define WCS_SECURITY_RESPONSE__058 0xC7BBEFBD
#define WCS_SECURITY_CHALLENGE_059 0x8D2FFCB8
#define WCS_SECURITY_RESPONSE__059 0xBE87FBEB
#define WCS_SECURITY_CHALLENGE_060 0x371033CD
#define WCS_SECURITY_RESPONSE__060 0x47FD37C9
#define WCS_SECURITY_CHALLENGE_061 0xA6915EE4
#define WCS_SECURITY_RESPONSE__061 0x2E4828D1
#define WCS_SECURITY_CHALLENGE_062 0x4BD915F8
#define WCS_SECURITY_RESPONSE__062 0x635CAF68
#define WCS_SECURITY_CHALLENGE_063 0xBFF3C012
#define WCS_SECURITY_RESPONSE__063 0x2C72EF5C
#define WCS_SECURITY_CHALLENGE_064 0x5FA2F625
#define WCS_SECURITY_RESPONSE__064 0xB1A92E88
#define WCS_SECURITY_CHALLENGE_065 0x79A8A993
#define WCS_SECURITY_RESPONSE__065 0x9A51A718
#define WCS_SECURITY_CHALLENGE_066 0x9235B96A
#define WCS_SECURITY_RESPONSE__066 0x3B8134DE
#define WCS_SECURITY_CHALLENGE_067 0x52CCFB3C
#define WCS_SECURITY_RESPONSE__067 0x66AD7AC8
#define WCS_SECURITY_CHALLENGE_068 0x39E23A78
#define WCS_SECURITY_RESPONSE__068 0x23C4FB4C
#define WCS_SECURITY_CHALLENGE_069 0x6B2F5E68
#define WCS_SECURITY_RESPONSE__069 0x77352F08
#define WCS_SECURITY_CHALLENGE_070 0x4EAC1CA3
#define WCS_SECURITY_RESPONSE__070 0x51AD0989
#define WCS_SECURITY_CHALLENGE_071 0x8492BF95
#define WCS_SECURITY_RESPONSE__071 0x361575A8
#define WCS_SECURITY_CHALLENGE_072 0x6275FDCF
#define WCS_SECURITY_RESPONSE__072 0x73F3667A
#define WCS_SECURITY_CHALLENGE_073 0x9DF421C1
#define WCS_SECURITY_RESPONSE__073 0xBFBA7A28
#define WCS_SECURITY_CHALLENGE_074 0x763EDEFB
#define WCS_SECURITY_RESPONSE__074 0x2B77FE31
#define WCS_SECURITY_CHALLENGE_075 0x57A90A43
#define WCS_SECURITY_RESPONSE__075 0xC377F8E0
#define WCS_SECURITY_CHALLENGE_076 0xA9D1A241
#define WCS_SECURITY_RESPONSE__076 0xA6B12BC8
#define WCS_SECURITY_CHALLENGE_077 0x11D6BED9
#define WCS_SECURITY_RESPONSE__077 0x7B253BC8
#define WCS_SECURITY_CHALLENGE_078 0x56C01EBC
#define WCS_SECURITY_RESPONSE__078 0x29F1AE79
#define WCS_SECURITY_CHALLENGE_079 0x2A3A2106
#define WCS_SECURITY_RESPONSE__079 0x6026FC99
#define WCS_SECURITY_CHALLENGE_080 0x6A8A00E8
#define WCS_SECURITY_RESPONSE__080 0x3CE53381
#define WCS_SECURITY_CHALLENGE_081 0x62932045
#define WCS_SECURITY_RESPONSE__081 0x267D72D8
#define WCS_SECURITY_CHALLENGE_082 0x7812E5A5
#define WCS_SECURITY_RESPONSE__082 0xE6A37B6D
#define WCS_SECURITY_CHALLENGE_083 0x1BC0D4DB
#define WCS_SECURITY_RESPONSE__083 0x712B69B9
#define WCS_SECURITY_CHALLENGE_084 0x25016222
#define WCS_SECURITY_RESPONSE__084 0x3F21AAEB
#define WCS_SECURITY_CHALLENGE_085 0xD475BD5D
#define WCS_SECURITY_RESPONSE__085 0xE619045F
#define WCS_SECURITY_CHALLENGE_086 0x58932567
#define WCS_SECURITY_RESPONSE__086 0x672BE07C
#define WCS_SECURITY_CHALLENGE_087 0xEED7208A
#define WCS_SECURITY_RESPONSE__087 0xFB901531
#define WCS_SECURITY_CHALLENGE_088 0x6C5D0793
#define WCS_SECURITY_RESPONSE__088 0x24E944D9
#define WCS_SECURITY_CHALLENGE_089 0x083B81B6
#define WCS_SECURITY_RESPONSE__089 0xA12C1548
#define WCS_SECURITY_CHALLENGE_090 0x8026E8BE
#define WCS_SECURITY_RESPONSE__090 0xA33976D9
#define WCS_SECURITY_CHALLENGE_091 0x219DE2E2
#define WCS_SECURITY_RESPONSE__091 0x1C2160C3
#define WCS_SECURITY_CHALLENGE_092 0x94EEC9EA
#define WCS_SECURITY_RESPONSE__092 0x38FCAB38
#define WCS_SECURITY_CHALLENGE_093 0x3A00450F
#define WCS_SECURITY_RESPONSE__093 0xB2A58238
#define WCS_SECURITY_CHALLENGE_094 0xA8B8AB17
#define WCS_SECURITY_RESPONSE__094 0x1EF42688
#define WCS_SECURITY_CHALLENGE_095 0x937F80FA
#define WCS_SECURITY_RESPONSE__095 0xA73F574D
#define WCS_SECURITY_CHALLENGE_096 0x74710AAC
#define WCS_SECURITY_RESPONSE__096 0x4A3906CC
#define WCS_SECURITY_CHALLENGE_097 0xADE1E227
#define WCS_SECURITY_RESPONSE__097 0x52613C8D
#define WCS_SECURITY_CHALLENGE_098 0x883AEAD7
#define WCS_SECURITY_RESPONSE__098 0xEC7C83F8
#define WCS_SECURITY_CHALLENGE_099 0xC6454454
#define WCS_SECURITY_RESPONSE__099 0x27BF7E0A
#define WCS_SECURITY_CHALLENGE_100 0x9C04CC04
#define WCS_SECURITY_RESPONSE__100 0x32290719


// Here's some quick forms of dongle-test code to drop into WCS.cpp to
// exercise stuff.
#ifdef EXCERCISE_DONGLE

// Change FOOMIN to the minute you want to test on.
SECURITY_INLINE_CHECK(001, FOOMIN);
SECURITY_INLINE_CHECK(002, FOOMIN);
SECURITY_INLINE_CHECK(003, FOOMIN);
SECURITY_INLINE_CHECK(004, FOOMIN);
SECURITY_INLINE_CHECK(005, FOOMIN);
SECURITY_INLINE_CHECK(006, FOOMIN);
SECURITY_INLINE_CHECK(007, FOOMIN);
SECURITY_INLINE_CHECK(008, FOOMIN);
SECURITY_INLINE_CHECK(009, FOOMIN);
SECURITY_INLINE_CHECK(010, FOOMIN);
SECURITY_INLINE_CHECK(011, FOOMIN);
SECURITY_INLINE_CHECK(012, FOOMIN);
SECURITY_INLINE_CHECK(013, FOOMIN);
SECURITY_INLINE_CHECK(014, FOOMIN);
SECURITY_INLINE_CHECK(015, FOOMIN);
SECURITY_INLINE_CHECK(016, FOOMIN);
SECURITY_INLINE_CHECK(017, FOOMIN);
SECURITY_INLINE_CHECK(018, FOOMIN);
SECURITY_INLINE_CHECK(019, FOOMIN);
SECURITY_INLINE_CHECK(020, FOOMIN);
SECURITY_INLINE_CHECK(021, FOOMIN);
SECURITY_INLINE_CHECK(022, FOOMIN);
SECURITY_INLINE_CHECK(023, FOOMIN);
SECURITY_INLINE_CHECK(024, FOOMIN);
SECURITY_INLINE_CHECK(025, FOOMIN);
SECURITY_INLINE_CHECK(026, FOOMIN);
SECURITY_INLINE_CHECK(027, FOOMIN);
SECURITY_INLINE_CHECK(028, FOOMIN);
SECURITY_INLINE_CHECK(029, FOOMIN);
SECURITY_INLINE_CHECK(030, FOOMIN);
SECURITY_INLINE_CHECK(031, FOOMIN);
SECURITY_INLINE_CHECK(032, FOOMIN);
SECURITY_INLINE_CHECK(033, FOOMIN);
SECURITY_INLINE_CHECK(034, FOOMIN);
SECURITY_INLINE_CHECK(035, FOOMIN);
SECURITY_INLINE_CHECK(036, FOOMIN);
SECURITY_INLINE_CHECK(037, FOOMIN);
SECURITY_INLINE_CHECK(038, FOOMIN);
SECURITY_INLINE_CHECK(039, FOOMIN);
SECURITY_INLINE_CHECK(040, FOOMIN);
SECURITY_INLINE_CHECK(041, FOOMIN);
SECURITY_INLINE_CHECK(042, FOOMIN);
SECURITY_INLINE_CHECK(043, FOOMIN);
SECURITY_INLINE_CHECK(044, FOOMIN);
SECURITY_INLINE_CHECK(045, FOOMIN);
SECURITY_INLINE_CHECK(046, FOOMIN);
SECURITY_INLINE_CHECK(047, FOOMIN);
SECURITY_INLINE_CHECK(048, FOOMIN);
SECURITY_INLINE_CHECK(049, FOOMIN);
SECURITY_INLINE_CHECK(050, FOOMIN);
SECURITY_INLINE_CHECK(051, FOOMIN);
SECURITY_INLINE_CHECK(052, FOOMIN);
SECURITY_INLINE_CHECK(053, FOOMIN);
SECURITY_INLINE_CHECK(054, FOOMIN);
SECURITY_INLINE_CHECK(055, FOOMIN);
SECURITY_INLINE_CHECK(056, FOOMIN);
SECURITY_INLINE_CHECK(057, FOOMIN);
SECURITY_INLINE_CHECK(058, FOOMIN);
SECURITY_INLINE_CHECK(059, FOOMIN);
SECURITY_INLINE_CHECK(060, FOOMIN);
SECURITY_INLINE_CHECK(061, FOOMIN);
SECURITY_INLINE_CHECK(062, FOOMIN);
SECURITY_INLINE_CHECK(063, FOOMIN);
SECURITY_INLINE_CHECK(064, FOOMIN);
SECURITY_INLINE_CHECK(065, FOOMIN);
SECURITY_INLINE_CHECK(066, FOOMIN);
SECURITY_INLINE_CHECK(067, FOOMIN);
SECURITY_INLINE_CHECK(068, FOOMIN);
SECURITY_INLINE_CHECK(069, FOOMIN);
SECURITY_INLINE_CHECK(070, FOOMIN);
SECURITY_INLINE_CHECK(071, FOOMIN);
SECURITY_INLINE_CHECK(072, FOOMIN);
SECURITY_INLINE_CHECK(073, FOOMIN);
SECURITY_INLINE_CHECK(074, FOOMIN);
SECURITY_INLINE_CHECK(075, FOOMIN);
SECURITY_INLINE_CHECK(076, FOOMIN);
SECURITY_INLINE_CHECK(077, FOOMIN);
SECURITY_INLINE_CHECK(078, FOOMIN);
SECURITY_INLINE_CHECK(079, FOOMIN);
SECURITY_INLINE_CHECK(080, FOOMIN);
SECURITY_INLINE_CHECK(081, FOOMIN);
SECURITY_INLINE_CHECK(082, FOOMIN);
SECURITY_INLINE_CHECK(083, FOOMIN);
SECURITY_INLINE_CHECK(084, FOOMIN);
SECURITY_INLINE_CHECK(085, FOOMIN);
SECURITY_INLINE_CHECK(086, FOOMIN);
SECURITY_INLINE_CHECK(087, FOOMIN);
SECURITY_INLINE_CHECK(088, FOOMIN);
SECURITY_INLINE_CHECK(089, FOOMIN);
SECURITY_INLINE_CHECK(090, FOOMIN);
SECURITY_INLINE_CHECK(091, FOOMIN);
SECURITY_INLINE_CHECK(092, FOOMIN);
SECURITY_INLINE_CHECK(093, FOOMIN);
SECURITY_INLINE_CHECK(094, FOOMIN);
SECURITY_INLINE_CHECK(095, FOOMIN);
SECURITY_INLINE_CHECK(096, FOOMIN);
SECURITY_INLINE_CHECK(097, FOOMIN);
SECURITY_INLINE_CHECK(098, FOOMIN);
SECURITY_INLINE_CHECK(099, FOOMIN);
SECURITY_INLINE_CHECK(100, FOOMIN);

{
int i, KeepTrying;
char DongDebug[40];
unsigned long SecResp;

for(i = 0; i < 99; i++)
	{
	KeepTrying = 1;
	while (KeepTrying)
		{
		if(SecResp = GlobalApp->Sentinal->CheckDongle(SentWinChalResp[i * 2]) != (SentWinChalResp[(i * 2) + 1]))
			{
			sprintf(DongDebug, "Test Failed for code %d: %X:%X!=%X", SentWinChalResp[i * 2], SentWinChalResp[(i * 2) + 1], SecResp);
			OutputDebugStr(DongDebug);
			if(!UserMessageRETRYCAN("Security Test", DongDebug))
				{
				KeepTrying = 0;
				} // if
			} // if
		else
			{
			sprintf(DongDebug, "Checked %d.\n", i);
			OutputDebugStr(DongDebug);
			break;
			} // else
		} // while
	if(KeepTrying == 0) break;
	} // for

}
#endif // EXCERCISE_DONGLE

#endif // WCS_SECURITY_H



